<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>论文拆解：Understanding the Performance of Sparse Matrix-Vector Multiplication</title>
    <link href="/2024/09/10/%E8%AE%BA%E6%96%87%E6%8B%86%E8%A7%A3-understanding%20perf%20of%20spmv/"/>
    <url>/2024/09/10/%E8%AE%BA%E6%96%87%E6%8B%86%E8%A7%A3-understanding%20perf%20of%20spmv/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="论文拆解：Understanding-the-Performance-of-Sparse-Matrix-Vector-Multiplication"><a href="#论文拆解：Understanding-the-Performance-of-Sparse-Matrix-Vector-Multiplication" class="headerlink" title="论文拆解：Understanding the Performance of Sparse Matrix-Vector Multiplication"></a>论文拆解：Understanding the Performance of Sparse Matrix-Vector Multiplication</h1><hr><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><blockquote><p>In order to gain an insight on the details of SpMxV performance, we conduct a suite of experiments on a rich set of matrices for three different commodity hardware platforms.</p></blockquote><p>作者通过对三种商品硬件平台，在丰富矩阵集上进行实验，深入了解SpMxV性能的细节。</p><hr><h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h2><p>一个背景知识：CG and GMRES迭代求解方法需要用到稀疏矩阵向量乘法</p><hr><p>介绍了稀疏矩阵向量乘法<strong>内存受限</strong>的几个原因：</p><ol><li>相比于$M\times M$和$LU$，矩阵乘向量的计算复杂度为$O(n^2)$，但是内存访问的区域却同样是$O(n^2)$，内存访问相对于浮点计算的比率远大于$M\times M$和$LU$</li></ol><blockquote><p>MxM and LU benefit from the so called surface-to-volume effect, since for a problem size of n they perform O(n^3) operations on O(n^2) amount of data. On the contrary, matrix-vector multiplication performs O(n^2) operations on O(n^2) amount of data, which means that the ratio of memory access to floating point operations is significantly higher. </p></blockquote><ol start="2"><li><p>数据的重用很少，即时间局部性受限</p><blockquote><p>Seen from another point of view, there is little data reuse in the matrix-vector multiplication, i.e. very restricted temporal locality.</p></blockquote></li><li><p>稀疏矩阵的存储结构使性能进一步下降</p><blockquote><p>When sparsity comes into play, the performance is further degraded.</p></blockquote></li></ol><hr><p>一个一般的结论：可以利用有关矩阵结构和处理器架构特征的信息来有效地优化SpMxV</p><blockquote><p>A general conclusion is that SpMxV can be efficiently optimized by exploiting information regarding the matrix structure and the processor’s architectural characteristics.</p></blockquote><hr><p>简单介绍先前研究</p><p>概括先前研究存在的不足：</p><ol><li><p>先前的研究主要关注已报告问题的一个子集，对有限数量的稀疏矩阵进行优化。这可能会导致与之前各种工作中使用的CPU相互矛盾的结论，甚至可能导致对SpMxV优化的问题和候选解决方案的混淆。</p><blockquote><p>In general, previous research focuses on a subset of the reported problems<br>and proposes optimizations applied to a limited number of sparse matrices. This fact, along with the CPUs used in various previous works, may lead to contradictory conclusions and, perhaps, to confusion regarding the problems and candidate solutions for SpMxV optimization. </p></blockquote></li><li><p>很少有人研究应用所提出的优化后性能提升的确切原因。</p><blockquote><p> In addition, the exact reason for performance gain after the application<br>of the proposed optimizations is rarely investigated.</p></blockquote></li></ol><p>列举了两个例子：阻塞方法提高性能的原因尚不清楚，缺乏局部性是否是SpMxV中的一个关键问题</p><hr><p>简单介绍本文研究的目的：帮助理解SpMxV在现代微处理器上的性能问题。</p><blockquote><p>The goal of this paper is to assist in understanding the performance issues of SpMxV on modern microprocessors.</p></blockquote><p>指出这项研究的创新性：目前没有关于SpMxV内核或其任何优化版本在当前的微架构上的性能行为的实验结果。</p><blockquote><p>To our knowledge, there are no experimental results concerning the performance behavior of this kernel, or any of its optimized versions, on current microarchitectures.</p></blockquote><p>简要介绍研究方法和成果：对文献中报道的算法问题进行了分类。对于每个问题，在从Tim Davis的收藏中选择的100个矩阵上，进行一系列实验，以量化其对性能的影响。实验结果为SpMxV在现代微处理器上的性能提供了宝贵的见解，并揭示了在优化过程中可能特别有用的问题。</p><blockquote><p>In order to achieve this goal, we have categorized the problems of the algorithm as reported in literature. For each problem we conduct a series of experiments in order to quantify its effect on performance. Our experimental results provide valuable insight on the performance of SpMxV on modern microprocessors and reveal issues that will probably prove particularly useful in the process of optimization. Our experiments are performed on a large suite of 100 matrices selected from Tim Davis’ collection [4]. Based on the conclusions drawn from the conducted experiments, we propose guidelines that can aid the optimization process.</p></blockquote><p>指出下文的组织结构：</p><p>第2节：介绍了有关SpMxV和优化方法的相关工作</p><p>第3节：介绍了基本算法和报告的问题</p><p>第4节：展示了各种实验结果，阐明了SpMxV的性能问题</p><p>第5节：总结了结论并讨论了未来的研究工作</p><blockquote><p>The rest of the paper is organized as follows: Section 2 presents related work on SpMxV and optimization methods and Section 3 presents the basic algorithm and the reported problems. In Section 4 we present various experimental results that illuminate the performance issues of SpMxV,<br>while Section 5 summarizes our conclusions and discusses future research work.</p></blockquote><hr><h2 id="2-Related-work"><a href="#2-Related-work" class="headerlink" title="2. Related work"></a>2. Related work</h2><p>总结二十年来对于稀疏矩阵向量乘法的研究</p><blockquote><p>Sparse matrix-vector multiplication has attracted intensive scientific attention in the last two decades.</p></blockquote><hr><p>概括这些研究存在的不足：</p><p>(a) 实验评估中使用的矩阵套件通常很小</p><p>(b) 评估平台在大多数情况下包括上一代微架构</p><p>(c) 结论有时相互矛盾</p><p>(d) 所提出的方法所获得的性能提升没有针对所攻击的特定问题进行彻底分析</p><blockquote><p>Summarizing on the results of previous research on the field, the following conclusions may be drawn: (a) the matrix suites used in the experimental evaluations are usually quite small, (b) the evaluation platforms include in most cases previous generation microarchitectures, (c) the conclusions are sometimes contradictory and (d) the performance gains attained by the proposed methods are not thoroughly analyzed in relevance to the specific problems attacked.</p></blockquote><p>由此引出本文研究的目标：这项工作的目标是了解SpMxV内核在现代微处理器上的性能问题并提供可靠的优化指南。为此，我们采用了100个矩阵，进行了各种各样的实验，并报告了从微处理器提供的性能监控设施收集的性能数据和信息。</p><blockquote><p>The goal of this work is to understand the performance issues of SpMxV kernel on modern microprocessors and provide solid optimization guidelines. For this reason we employ a wide suite of 100 matrices, perform a large variety of experiments and report performance data and information collected from the performance monitoring facilities provided by the microprocessors.</p></blockquote><hr><h2 id="3-Basic-algorithm-and-problems"><a href="#3-Basic-algorithm-and-problems" class="headerlink" title="3. Basic algorithm and problems"></a>3. Basic algorithm and problems</h2><p>简要介绍了CSR存储格式：</p><p><img src="/image/20240910-Figure%201.png"></p><p>我个人的理解：这种存储方式类似于图论中把邻接矩阵存储为邻接链表，用n个行指针指向矩阵每一行的第一个非零元素，同时存储每个元素的值和列号</p><hr><p>根据文献，列出可能影响其性能的问题：</p><blockquote><p>According to literature, SpMxV presents the following problems that can potentially affect its performance:</p></blockquote><ul><li><p>内存强度（矩阵中没有时间局部性）。这是算法中固有的问题，无论矩阵是稀疏的还是密集的。与其他重要的数值程序（如矩阵乘法（MxM）或LU分解）不同，SpMxV内核受内存限制，因为矩阵向量乘法中的矩阵元素仅使用一次。</p></li><li><p>间接内存引用。例如CSR存储格式需要通过col ind和row ptr数据结构存储和访问矩阵元素的索引。这一事实意味着额外的加载操作、内存子系统的流量和缓存干扰。</p></li><li><p>向量x的不规则内存访问。与密集矩阵中对向量x的访问顺序不同，在稀疏矩阵中，这种访问是不规则的，并且依赖于矩阵的稀疏结构。这一事实使得利用向量x访问中固有的重用性的过程变得复杂。</p></li><li><p>行长较短：尽管这个问题并不明显，但在实践中经常遇到。许多稀疏矩阵都表现出大量长度较短的行。当内循环的行程数较少时，这一事实可能会由于循环的大量开销而降低性能。</p></li></ul><hr><h2 id="4-Experimental-evaluation"><a href="#4-Experimental-evaluation" class="headerlink" title="4. Experimental evaluation"></a>4. Experimental evaluation</h2><h3 id="4-1-Experimental-preliminaries"><a href="#4-1-Experimental-preliminaries" class="headerlink" title="4.1 Experimental preliminaries"></a>4.1 Experimental preliminaries</h3><p>实验准备：</p><p>介绍了使用的100个矩阵集合：</p><blockquote><p>#1 是一个密集的 1000×1000 矩阵<br>#2-45 是在SPARSITY中被使用的矩阵<br>#46 是一个 10000×10000 随机稀疏矩阵<br>#87 是一个由SPARSKIT创建的5点模板有限差分矩阵<br>其余的都是集合中非零元素数量和行数最大的矩形矩阵</p></blockquote><p>大部分矩阵是从Tim Davis的集合中选出的，所有矩阵都以CSR格式存储</p><p>接下来介绍了实验平台用到的三种微处理器：</p><blockquote><p>Intel Core 2 Xeon（时钟速度：2.6GHz，4MB L2 缓存 – Woodcrest）<br>Intel Pentium 4 Xeon（时钟速度：2.8GHz，1MB L2 缓存 – Netburst）<br>AMD Opteron（时钟速度：1.8GHz，1MB L2 缓存 – Opteron）</p></blockquote><p>操作系统、编译器信息：</p><blockquote><p>Linux (kernel version 2.6) for the x86 64 ISA<br>gcc version 4.1 with the -O3 -funroll-loops optimization flags</p></blockquote><p>性能测试的具体方法和评估指标：</p><blockquote><p>The experiments were conducted by measuring the execution time of 128 consecutive SpMxV operations with randomly created x vectors for every matrix in the set and for each different microprocessor. The floating point operations per second (FLOPS) metric of each run was calculated by dividing the total number of operations (2×nnz) by the execution time. We used 64-bit integers for the representation of indices in col ind and applied double precision arithmetic. It should be noted that we made no attempt to artificially pollute the cache after each iteration, in order to better simulate iterative scientific application behavior, where the data of the matrices are present in the cache, either because they have just been produced, or because they were recently accessed.</p></blockquote><hr><p>简单介绍硬件预取，并测试硬件预取对Intel处理器SpMxV内核性能的影响：</p><p><img src="/image/20240910-Table%201.png"></p><p>图表显示，在两个Intel处理器上，开启硬件预取，对于SpMxV内核性能都有提升，大部分矩阵在运算时加速了10%以上。在Netburst处理器上的性能提升效果比Woodcrest处理器好。</p><hr><h3 id="4-2-Experimental-evaluation-of-serial-SpMxV"><a href="#4-2-Experimental-evaluation-of-serial-SpMxV" class="headerlink" title="4.2 Experimental evaluation of serial SpMxV"></a>4.2 Experimental evaluation of serial SpMxV</h3><p>先测试了SpMx的基本性能作为对照，之后分别针对上文提出的三个稀疏矩阵特有的问题设计了比较实验</p><h4 id="4-2-1-Basic-performance-of-serial-SpMx"><a href="#4-2-1-Basic-performance-of-serial-SpMx" class="headerlink" title="4.2.1 Basic performance of serial SpMx"></a>4.2.1 Basic performance of serial SpMx</h4><p><img src="/image/20240910-Figure%202.png"></p><p>图2显示了实验集上每个矩阵和架构的SpMxV内核的详细性能结果（以 FLOPS 为单位）</p><p><img src="/image/20240910-Table%202.png"></p><p>表格2显示了SpMxV内核在不同架构的处理器上的综合性能</p><p>根据图2可以看出，在矩阵集里面不同矩阵上的性能具有很大的差异。为了进一步阐述这一观察结果，我们把矩阵集区分为两个不同的类别：工作集完全适合L2缓存的矩阵，因此只会出现强制未命中；工作集大于L2缓存大小的矩阵，可能会出现容量未命中。工作集 (ws) 的计算公式为：ws &#x3D; (nnz × 2 + nrows × 2 + ncols) × 8。</p><p><img src="/image/20240910-Figure%203.png"></p><p>在图3中，我们展示了每个矩阵所达到的性能，其工作集标记为x轴。每个图中的垂直线表示每个架构的L2缓存大小。该图表明，各种矩阵性能之间的巨大差异是由于其工作集的大小造成的。如果矩阵的工作集小于缓存，则预期性能会显著提高。</p><p>这两个类别所涉及的性能问题都不同，比较不同类别的矩阵的性能可能会导致错误的结论。</p><p><img src="/image/20240910-Figure%204.png"></p><p>图4展示了每个矩阵相对于L2缓存未命中率的性能，该性能是根据每个处理器的性能计数器测量的。正如预期的那样，小于缓存大小的工作集表现出接近于零的L2未命中率。在更粗略的层面上，FLOPS中的性能和L2未命中之间似乎存在相关性。但是仅靠L2未命中率指标不足以了解内核的性能。例如，某些具有相似未命中率的矩阵的MFLOPS差异很大。</p><hr><h4 id="4-2-2-Irregular-accesses"><a href="#4-2-2-Irregular-accesses" class="headerlink" title="4.2.2 Irregular accesses"></a>4.2.2 Irregular accesses</h4><p>noxmiss benchmark：将col ind数组清零，以便对x的每个引用都只访问x[0]，使得对x的访问模式几乎完美。忽略掉计算数值上的不同对性能造成的影响，只考虑不规则的访问对性能的影响。</p><p><img src="/image/20240910-Table%203.png"></p><p>只有一小部分矩阵（不超过整个矩阵集的1&#x2F;3）在所有处理器上都实现了超过10%的显著性能加速。这意味着SpMxV的不规则访问模式不是主要的性能问题。</p><p>对于绝大多数矩阵，对x的访问似乎呈现出一些规律，这些规律要么有利于从缓存中重用数据，要么表现出可被硬件预取机制检测到的模式。然而，在标准基准测试中表现较差的大多数矩阵在 noxmiss 基准测试中遇到了相当显著的加速。<br>通过这个现象可以得出这样的结论：存在一个矩阵子集，其中对x的不规则访问对性能造成了相当大的阻碍。这些矩阵具有相当不规则的非零元素模式，最终导致对x的访问不佳和重用率低，从而降低性能。</p><hr><h4 id="4-2-3-Short-row-lengths"><a href="#4-2-3-Short-row-lengths" class="headerlink" title="4.2.3 Short row lengths"></a>4.2.3 Short row lengths</h4><p><img src="/image/20240910-Figure%205.png"></p><p>图5是把超过80%的行包含少于八个元素的矩阵单独拿出来得到性能相对于工作集大小的分布图，图中水平虚线是所有矩阵的平均性能。可以看出具有较大工作集和许多短行的矩阵表现出的性能明显低于平均值。然而，具有许多短行和小工作集的矩阵实现了非常好的性能，这一事实暗示循环开销不是唯一的因素。</p><p>支持上述观点的另一个重要观察结果是，图5中报告的矩阵与应用noxmiss基准测试时受益的矩阵一致（几乎没有例外）。这些事实引导我们得出结论：短行长可能代表x向量的大量缓存未命中。这可以通过以下事实来解释：短行长增加了在后续行中访问x的完全不同元素的可能性。</p><hr><h4 id="4-2-4-Indirect-memory-references"><a href="#4-2-4-Indirect-memory-references" class="headerlink" title="4.2.4 Indirect memory references"></a>4.2.4 Indirect memory references</h4><p>noind-rowptr,noindcolind benchmark：使用了每行具有<strong>恒定数量</strong>的<strong>连续元素</strong>的合成矩阵。这些矩阵使我们能够通过用顺序访问来消除两种间接访问</p><p><img src="/image/20240910-Figure%206.png"></p><p>图6可以明显看出，row ptr中的间接内存引用不会影响性能。这是可以预见的，因为这些引用很少，并且取代了内部循环初始化中已经存在的开销。另一方面，通过col ind间接访问x的开销会导致性能急剧下降。在这种情况下，x的每次内存访问都会被一次额外的内存访问所累加，这会增加问题的ws，在代码中添加额外的指令并限制内核的IPC。</p><hr><h4 id="4-2-5-Memory-intensity-no-temporal-locality-in-the-matrix"><a href="#4-2-5-Memory-intensity-no-temporal-locality-in-the-matrix" class="headerlink" title="4.2.5 Memory intensity (no temporal locality in the matrix)"></a>4.2.5 Memory intensity (no temporal locality in the matrix)</h4><p>进行了一组简单的比较实验：我们使用32位而不是64位整数作为col ind结构，以减少工作集的总大小。Woodcrest的加速比为1.20，Netburst的加速比为 1.29，Opteron的加速比为1.17。令人印象深刻的是，ws降低了22.4%，同时性能显著提高了。根据这些结果，我们可以得出结论，在间接内存访问的情况下观察到的改进主要是由于ws的减少。</p><p><img src="/image/20240910-Figure%201.png"></p><p>此外，内核在表示矩阵的数据结构a、col ind和row ptr中没有表现出重用，传统上认为缺乏时间局部性会影响性能。然而，如图1所示，所有上述结构都以非常规则的流式模式和单位步长进行访问。硬件预取器能够检测这些简单的访问模式并透明地从内存中获取其相应的缓存行。因此可以得出一个相当可靠的结论：矩阵中缺乏时间局部性导致缓存未命中的情况非常少，因此性能不会受到这一特定因素的影响。</p><hr><h3 id="4-3-Conclusions-on-the-experiments-and-optimization-guidelines"><a href="#4-3-Conclusions-on-the-experiments-and-optimization-guidelines" class="headerlink" title="4.3 Conclusions on the experiments and optimization guidelines"></a>4.3 Conclusions on the experiments and optimization guidelines</h3><p>通过上述实验可以得到一些结论：</p><ul><li><p>内核的性能受矩阵工作集的影响非常大。但是由于工作集小的矩阵对应于小规模的问题，因此它们的优化意义不大，我们专注于工作集大于L2缓存的大型工作集矩阵。此外，减少同一问题的ws会释放内存总线资源，使执行速度显着提高。</p></li><li><p>算法的内存强度以及间接内存引用对x的影响是SpMxV性能不佳的最关键因素，并影响所有矩阵。</p></li><li><p>x访问的不规则性和许多短行的存在在较小范围内影响性能。</p></li><li><p>矩阵结构缺乏时间局部性不会通过可以优化的问题（例如缓存未命中）影响性能，但本质上会增加内存访问次数。</p></li></ul><p><img src="/image/20240910-Figure%207.png"></p><p>图7是对结果的统计分析，前三个条形图表示密集矩阵（1024 × 1024）以密集格式（dmv）存储和以csr格式存储的标准情况（csrdense）和noind-colind基准（csr-dense-noindcolind）的矩阵向量乘法性能。csr-avg(?)表示矩阵集合中所有工作集大于L2大小的矩阵的平均性能，而其余的条形图则对应于这些矩阵的所有可能子集，这些子集基于它们的规律性（-irregular&#x2F;-regular）以及它们是否以短行为主（-sr&#x2F;-nosr）</p><p>原文中的一个小问题：<img src="/image/20240910-csr-avg.png"></p><p>原文此处疑似是指csr-avg，出现了笔误？</p><p>首先，从csr-dense-nocolind到csr-dense之间接近2倍的性能差异，是col ind的间接引用导致的</p><p>另外，如果矩阵表现出一些不良特征，例如不规则性和许多短行，则性能可能会进一步下降约1.35倍。另一方面，如果矩阵不以短行为主并以规则方式访问x，则其性能可能会比平均水平提高1.1倍，并接近存储在CSR中的密集矩阵的性能。还要注意，大多数矩阵都是不以短行为主并以规则方式访问x。</p><p>由此总结出以下优化原则：</p><ol><li>通过使用尽可能小的数据类型（例如，col ind使用32位或16位整数，x使用单精度存储）来减小ws大小，以减少内存子系统的压力。即使牺牲CPU周期来减小ws大小（例如，通过应用压缩）也会使性能提高。增加ws的存储结构成功的机会很小。</li></ol><blockquote><p>Reduce the ws size by using the smallest possible data types (e.g. 32-bit or 16-bit integers for col ind, single precision storage for x) in order to reduce the pressure on the memory subsystem. Even sacrificing CPU cycles to reduce the ws size (e.g. by applying compression) will also lead to performance improvement (as in [21]). Storage structures that increase the ws have small opportunities to succeed.</p></blockquote><ol start="2"><li>减少间接内存引用。这可以通过利用矩阵中的常规结构来实现，例如全对角线或密集子块。</li></ol><blockquote><p> Reduce indirect memory referencing. This could be achieved by exploiting regular structures within the matrix such as full diagonals (as in [1]) or dense sub-blocks (e.g. BCSR format as in [3, 8, 19]).</p></blockquote><ol start="3"><li>谨慎填充。添加许多非零元素来实现优化方法可能会极大地影响性能，主要是由于ws的增加。额外的浮点运算不会造成这么大的问题，因为CPU有空闲周期。</li></ol><blockquote><p> Pad sparingly. Adding many non-zero elements to accomplish an optimization approach may dramatically affect performance, mainly due to the increase in the ws. The extra floating-point operations should not create such a big problem, since the CPU has idle cycles to spare. Thus, the BCSR format used in [3, 8, 19] is expected to be beneficial only in the subset of matrices that contain many dense subblocks.</p></blockquote><ol start="4"><li>注意行长较短和循环开销。一些优化方法将矩阵拆分为子矩阵的总和。在这种情况下，应注意子矩阵不要属于行长较短的矩阵类别。如果在乘法内核中插入额外的外循环，也可能产生大量开销，尤其是在行短的矩阵中。</li></ol><blockquote><p>Beware of short row lengths and loop overheads. Some optimization approaches split the matrix into a sum of submatrices (as in [1,19]). In this case one should take care that the submatrices do not fall into the category of matrices with short row lengths. Alternatively, one may insert an additional outer loop in the multiplication kernel (as in [13]). This may also incur significant overheads especially in matrices with short rows.</p></blockquote><ol start="5"><li>识别x向量上存在访问问题的矩阵，仅对它们应用缓存重用优化。</li></ol><blockquote><p>Identify matrices with problematic access on the x vector and apply cache reuse optimizations only to them.</p></blockquote><ol start="6"><li>只要CPU支持硬件预取，就无需应用软件预取来解决缺乏时间局部性的问题。</li></ol><blockquote><p>There is no need to apply software prefetching to attack the problem of the lack of temporal locality as long as the CPU supports hardware prefetching.</p></blockquote><hr><h2 id="5-Conclusions-–-Future-work"><a href="#5-Conclusions-–-Future-work" class="headerlink" title="5. Conclusions – Future work"></a>5. Conclusions – Future work</h2><p>这项研究的结论和意义：得到了有关现代微处理器架构上稀疏矩阵向量乘法的性能问题的大量实验结果，阐明并量化了所报告问题对内核性能的影响，并有助于制定优化代码的指南。</p><blockquote><p>In this paper we presented extensive experimental results regarding the performance issues of sparse matrixvector multiplication on modern microprocessor architectures. Our results illuminate and quantify the effect of the reported problems on the kernel’s performance and can aid in forming a guideline to optimize the code. </p></blockquote><p>指出未来工作的方向：我们将应用从本文中获得的知识，使用短矢量化方法优化内核，我们相信这将通过减少工作集、间接引用以及利用矢量内存负载和浮点运算来提供性能优势。</p><blockquote><p>For future work, we will apply the knowledge gained from this paper in order to optimize the kernel using a short vectorization approach, which we believe that will provide performance benefits from the reduction of the working set, the indirect referencing and from the utilization of vector memory loads and floating-point operations.</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>论文拆解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hpc</tag>
      
      <tag>spmv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Set up the CUDA Development Environment</title>
    <link href="/2024/09/05/Set-up-the-CUDA-Development-Environment/"/>
    <url>/2024/09/05/Set-up-the-CUDA-Development-Environment/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Set-up-the-CUDA-Development-Environment"><a href="#Set-up-the-CUDA-Development-Environment" class="headerlink" title="Set up the CUDA Development Environment"></a>Set up the CUDA Development Environment</h2><p>To set up a CUDA development environment, in addition to installing the CUDA toolkit, you also need to install a C++ compiler. MSVC is a commonly used compiler among them.</p><h3 id="1-Install-CUDA-toolkit"><a href="#1-Install-CUDA-toolkit" class="headerlink" title="1. Install CUDA toolkit"></a>1. Install CUDA toolkit</h3><p><a href="https://developer.nvidia.com/cuda-downloads">https://developer.nvidia.com/cuda-downloads</a></p><h3 id="2-Install-Visual-Studio"><a href="#2-Install-Visual-Studio" class="headerlink" title="2. Install Visual Studio"></a>2. Install Visual Studio</h3><p><a href="https://visualstudio.microsoft.com/free-developer-offers">https://visualstudio.microsoft.com/free-developer-offers</a></p><p>select the C++ component<br><img src="/image/2024090901.png"></p><p>If the CUDA version is old, it may not support the latest version of the Visual Studio compiler:</p><p><code>fatal error C1189: #error:  -- unsupported Microsoft Visual Studio version! Only the versions between 2017 and 2022 (inclusive) are supported! The nvcc flag &#39;-allow-unsupported-compiler&#39; can be used to override this version check; however, using an unsupported host compiler may cause compilation failure or incorrect run time execution. Use at your own risk.</code></p><p>Try downloading a newer version of CUDA.</p><h3 id="3-Add-cl-exe-to-Path"><a href="#3-Add-cl-exe-to-Path" class="headerlink" title="3. Add cl.exe to Path"></a>3. Add cl.exe to Path</h3><p>If we directly use nvcc to compile C++files, an error message will appear: <code>Cannot find compiler &#39;cl.exe&#39; in PATH</code>.</p><p>So we have to add the path of cl.exe to system variable.</p><blockquote><p>G:\Program Files\Microsoft Visual Studio\2022\BuildTools\VC\Tools\MSVC\14.41.34120\bin\Hostx64\x64</p></blockquote><p>Add this path to the system variable, restart your computer.</p><h3 id="4-Using-GPU-to-output-“Hello-World”"><a href="#4-Using-GPU-to-output-“Hello-World”" class="headerlink" title="4. Using GPU to output “Hello World”"></a>4. Using GPU to output “Hello World”</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function">__global__ <span class="hljs-type">void</span> <span class="hljs-title">hello_from_gpu</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello World from the GPU!\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    hello_from_gpu&lt;&lt;&lt;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>&gt;&gt;&gt;();<br>    <span class="hljs-built_in">cudaDeviceSynchronize</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>nvcc helloworld.cu</p></blockquote><blockquote><p>.&#x2F;a.exe </p></blockquote><p><img src="/image/2024090902.png"></p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p>樊哲勇.CUDA编程基础与实践[M].北京:清华大学出版社,2020.</p>]]></content>
    
    
    <categories>
      
      <category>programming practice</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CUDA</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ex1 - An Introduction to Parallel Programming</title>
    <link href="/2024/07/30/Ex1-An-Introduction-to-Parallel-Programming/"/>
    <url>/2024/07/30/Ex1-An-Introduction-to-Parallel-Programming/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Ex1-An-Introduction-to-Parallel-Programming"><a href="#Ex1-An-Introduction-to-Parallel-Programming" class="headerlink" title="Ex1 - An Introduction to Parallel Programming"></a>Ex1 - An Introduction to Parallel Programming</h2><h3 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h3><p>Q: Devise formulas for the functions that calculate my_first_i and my_last_i in the global sum example. Remember that each core should be assigned roughly the same number of elements of computations in the loop. Hint: First consider the case when n is evenly divisible by p.</p><p>A:</p><p>$id &#x3D; get_thread_num()$</p><p>$base &#x3D; (n + p - 1) &#x2F; p &#x3D; \lceil \frac{n}{p} \rceil$</p><p>$my_fisrt_i &#x3D; base * id$</p><p>$my_last_i &#x3D; min{base * (id+1),\  n}$</p><p>In this way, the number of elements of computations assigned on the last kernel may be a little bit smaller than other core (no more than p). Since p &lt;&lt; n, this difference can be ignored.</p><h3 id="1-2"><a href="#1-2" class="headerlink" title="1.2"></a>1.2</h3><p>Q: We’ve implicitly assumed that each call to Compute_next_value requires roughly the same amount of work as the other calls. How would you change your answer to the preceding question if call i &#x3D; k requires k + 1 times as much work as the call with i &#x3D; 0? So if the first call (i &#x3D; 0) requires 2 milliseconds, the second call (i &#x3D; 1) requires 4, the third (i &#x3D; 2) requires 6, and so on.</p><p>A:</p><p>Assume that the function call cost 1 time when i&#x3D;0.</p><p>We can divide n calls into n&#x2F;2 pairs:</p><p>${1, n}$, ${2, n-1}$, ${3, n-2}$, … ${n&#x2F;2+1 (when\ n\ is\ odd)}$ or ${n&#x2F;2, n&#x2F;2+1 (when\ n\ is<br>\ even)}$</p><p>The cost in any pair is $n+1$.</p><p>The number of elements of calculations is the same for each pair (except when $n$ is odd, $n&#x2F;2+1$ cannot be paired).</p><p>So we can assign tasks like we did in the first question for each core. Each time the $i$-th call is evaluated, the $(n-i)$-th call should also be evaluated.</p><h3 id="1-3"><a href="#1-3" class="headerlink" title="1.3"></a>1.3</h3><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://github.com/rootusercop/An-Introduction-to-Parallel-Programming">https://github.com/rootusercop/An-Introduction-to-Parallel-Programming</a></p>]]></content>
    
    
    <categories>
      
      <category>programming practice</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hpc</tag>
      
      <tag>parallel programming</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Install Ubuntu Linux in VMware</title>
    <link href="/2024/07/27/Install-Ubuntu-Linux-in-VMware/"/>
    <url>/2024/07/27/Install-Ubuntu-Linux-in-VMware/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Install-Ubuntu-Linux-in-VMware"><a href="#Install-Ubuntu-Linux-in-VMware" class="headerlink" title="Install Ubuntu Linux in VMware"></a>Install Ubuntu Linux in VMware</h2><p>Installing the Linux operating system on a virtual machine is simpler and more convenient to use than installing it on a physical machine.</p><p>Although it runs much slower than being installed on a physical machine, it is more than enough for simple programming projects.</p><p>Here is how to install Ubuntu Linux on VMware.</p><h3 id="Download-VMware-Workstation"><a href="#Download-VMware-Workstation" class="headerlink" title="Download VMware Workstation"></a>Download VMware Workstation</h3><p>download link: <a href="https://support.broadcom.com/group/ecx/productdownloads?subfamily=VMware%20Workstation%20Pro">https://support.broadcom.com/group/ecx/productdownloads?subfamily=VMware%20Workstation%20Pro</a></p><p>Before browsing the webpage, we need register an account and log in.</p><p><img src="/image/QQ_1722079371091.png"></p><p>Click “VMware Workstation Pro 17.0 for Personal Use(Windows)” and download the latest version.</p><p>We need to complete the personal profile information before downloading.</p><p><img src="/image/QQ_1722079813704.png"></p><p>Click the download button and wait for a few minutes.</p><h3 id="Install-VMware"><a href="#Install-VMware" class="headerlink" title="Install VMware"></a>Install VMware</h3><p>Run the exe file we have downloaded to install VMware.</p><p>Choose the installation location.<br><img src="/image/QQ_1722080370769.png"></p><p>Add to system path.<br><img src="/image/QQ_1722080491096.png"></p><p>After installation is complete, Select “Personal Use”, no license required.</p><p><img src="/image/QQ_1722080692443.png" alt="installed successfully"></p><h3 id="Check-the-network-adapter"><a href="#Check-the-network-adapter" class="headerlink" title="Check the network adapter"></a>Check the network adapter</h3><p>After installing VMware, it is necessary to confirm whether your computer has installed two network adapters: <code>VMware Network Adapter VMnet1</code> and <code>VMware Network Adapter VMnet8</code>.</p><p>Enter <code>ipconfig</code> in the cmd window to view network configuration.</p><p>Here we can see these two network adapters.<br><img src="/image/QQ_1722081145510.png"></p><p>If you cannot find these two network adapters, you may need to uninstall and reinstall VMware.</p><h3 id="Download-Ubuntu"><a href="#Download-Ubuntu" class="headerlink" title="Download Ubuntu"></a>Download Ubuntu</h3><p>Download link: <a href="https://ubuntu.com/download/desktop">https://ubuntu.com/download/desktop</a></p><p>Download the latest version of Ubuntu.<br><img src="/image/QQ_1722081385587.png"></p><p>Be patient and wait.</p><h3 id="Create-a-new-virtual-machine"><a href="#Create-a-new-virtual-machine" class="headerlink" title="Create a new virtual machine"></a>Create a new virtual machine</h3><p>Open VMware and click <code>create a new virtual machine</code>.<br><img src="/image/QQ_1722085640800.png"></p><p>Select <code>typical</code> configuration.<br><img src="/image/QQ_1722085680957.png"></p><p>Find the path of downloaded iso file.<br><img src="/image/QQ_1722085782430.png"></p><p>Fill in relevant information.<br><img src="/image/QQ_1722085882165.png"></p><p>Select installation location.<br><img src="/image/QQ_1722085965129.png"></p><p>Allocate disk capacity. Check <code>Split disk into multiple files</code><br><img src="/image/QQ_1722086046778.png"></p><h3 id="Open-virtual-machine"><a href="#Open-virtual-machine" class="headerlink" title="Open virtual machine"></a>Open virtual machine</h3><p>Open VMware, find the newly created virtual machine, and click <code>open this virtual machine</code>.</p><p>Choose language and other settings.<br><img src="/image/QQ_1722086366201.png"></p><p>Update application and reopen it.<br><img src="/image/QQ_1722086707517.png"></p><p>Select <code>interactive installation</code>.<br><img src="/image/QQ_1722086819680.png"></p><p>Finish other settings according to your needs.</p><p><img src="/image/QQ_1722086976045.png"><br><img src="/image/QQ_1722086957840.png"><br><img src="/image/QQ_1722087253783.png"></p><p>Set your username and password, check your settings for accuracy, and then proceed with the installation.</p><p><img src="/image/QQ_1722087460721.png"></p><p>Restart virtual machine and complete installation.<br><img src="/image/QQ_1722089233710.png"></p><h3 id="Install-VMware-Tools"><a href="#Install-VMware-Tools" class="headerlink" title="Install VMware Tools"></a>Install VMware Tools</h3><p>Documentation link: <a href="https://docs.vmware.com/en/VMware-Tools/index.html">https://docs.vmware.com/en/VMware-Tools/index.html</a></p><p>VMware Tools is a set of services and components that enable several features in various VMware products for better management and seamless user interactions with guest operating systems.</p><p>Check in terminal on virtual machine, and enter the following command.</p><blockquote><p>sudo apt-get update<br>sudo apt-get upgrade<br>sudo apt-get install open-vm-tools-desktop -y</p></blockquote><p><img src="/image/QQ_1722090396389.png"></p><p>We can see that the tools has already been installed while installing the Ubuntu system.</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://blog.csdn.net/m0_70885101/article/details/137694608">https://blog.csdn.net/m0_70885101/article/details/137694608</a></p><p><a href="https://blog.csdn.net/SHERLOCK0226/article/details/139748840">https://blog.csdn.net/SHERLOCK0226/article/details/139748840</a></p>]]></content>
    
    
    <categories>
      
      <category>programming practice</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>vmware</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spam classification using classic models</title>
    <link href="/2024/07/26/Spam-classification-using-classic-models/"/>
    <url>/2024/07/26/Spam-classification-using-classic-models/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Spam-Classification"><a href="#Spam-Classification" class="headerlink" title="Spam Classification"></a>Spam Classification</h2><p>This is the final assignment of undergraduate elective course of UCAS: <em>Data Mining</em>, which may be helpful to you.</p><h3 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h3><p>problem link: <a href="https://challenge.datacastle.cn/v3/cmptDetail.html?id=352">https://challenge.datacastle.cn/v3/cmptDetail.html?id=352</a></p><p>Given email text information, establish a classification model to determine which emails are spam.</p><h3 id="Phone-Number-Checker"><a href="#Phone-Number-Checker" class="headerlink" title="Phone Number Checker"></a>Phone Number Checker</h3><h4 id="1-Theory"><a href="#1-Theory" class="headerlink" title="1.Theory"></a>1.Theory</h4><p>After downloading the training and testing data, I observed the spam text in the training set, trying to find some obvious features. I found that the vast majority of spam emails would contain “phone numbers”, usually a string of 11 in length, sometimes connected by characters such as spaces or ‘-‘ in the middle of the numbers.</p><p><img src="/image/image-7.png"><br><img src="/image/image-8.png"></p><p>So a natural idea is to mark all emails with phone numbers as spam, otherwise they are considered normal emails. Method for identifying phone numbers: Use a sliding window to check all consecutive 13 digit strings in the text. If 9 or more digits are digits, it is considered a phone number. For example, “0871-872-9755” will be recognized as a phone number.</p><h4 id="2-Code"><a href="#2-Code" class="headerlink" title="2.Code"></a>2.Code</h4><p>Critical Code:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_phone_number</span>(<span class="hljs-params">text</span>):<br>    <span class="hljs-comment"># Count the number of digits in the string</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">count_digits</span>(<span class="hljs-params">s</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(c.isdigit() <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s)<br><br>    <span class="hljs-comment"># Check every window of length 13 in the text</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(text) - <span class="hljs-number">12</span>):<br>        <span class="hljs-keyword">if</span>(count_digits(text[i:i+<span class="hljs-number">13</span>]) &gt;= <span class="hljs-number">9</span>):<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br><span class="hljs-comment"># 构建输出</span><br><span class="hljs-keyword">for</span> index, row <span class="hljs-keyword">in</span> test_data_df.iterrows():<br>    <span class="hljs-built_in">id</span> = row[<span class="hljs-string">&#x27;ID&#x27;</span>]<br>    <span class="hljs-keyword">if</span> check_phone_number(row[<span class="hljs-string">&#x27;Email&#x27;</span>]):    <span class="hljs-comment"># If a phone number is recognized in the text</span><br>        Label = <span class="hljs-string">&#x27;spam&#x27;</span>  <span class="hljs-comment"># Mark as spam</span><br>    <span class="hljs-keyword">else</span>:<br>        Label = <span class="hljs-string">&#x27;ham&#x27;</span><br>    new_row = pd.DataFrame([[<span class="hljs-built_in">id</span>, Label]], columns = [<span class="hljs-string">&#x27;ID&#x27;</span>, <span class="hljs-string">&#x27;Label&#x27;</span>])<br>    result_df = pd.concat([result_df, new_row], ignore_index = <span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h4 id="3-Result"><a href="#3-Result" class="headerlink" title="3.Result"></a>3.Result</h4><p><img src="/image/image-18.png"><br><img src="/image/image.png"></p><p>The accuracy on the training set is about 0.9457, and the accuracy on the test set is about 0.9434.</p><p>The initial way to identify phone numbers was to have 11 or more digits in a 13 length sliding window, with an accuracy rate of 0.9372.</p><p>It was discovered that some numbers were less than 11 digits and should still be recognized as phone numbers. The method of identifying phone numbers was changed to a 13 length sliding window with 9 or more digits. The accuracy of the test set was improved to 0.9434.</p><h3 id="Naive-Bayes-regression-model-based-on-bag-of-words"><a href="#Naive-Bayes-regression-model-based-on-bag-of-words" class="headerlink" title="Naive Bayes regression model based on bag of words"></a>Naive Bayes regression model based on bag of words</h3><h4 id="1-Theory-1"><a href="#1-Theory-1" class="headerlink" title="1.Theory"></a>1.Theory</h4><p>Build a big word bag for all spam emails and a big word bag for all normal emails.</p><p>First, calculate the prior probability: take the proportion of spam and normal emails in the training set samples as the prior probability.</p><p>Then multiply the frequency of each word appearing in spam emails to obtain the probability that the email is spam, and multiply the probability of each word appearing in normal emails to obtain the probability that the email is normal. Compare the two probabilities and take the larger one as the prediction result.</p><p>Laplace smoothing was used to avoid the problem of calculating a probability of 0 when the frequency of a word in the bag of words is 0.</p><h4 id="2-Code-1"><a href="#2-Code-1" class="headerlink" title="2.Code"></a>2.Code</h4><p>Critical Code:</p><p>(1) Data Processing：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">remove_punctuation</span>(<span class="hljs-params">text</span>):<br>    <span class="hljs-comment"># Use regular expressions to match any character that is not a letter, number, or space and replace it with a space</span><br>    text = re.sub(<span class="hljs-string">r&#x27;[^\w\s]&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, text)<br>    <span class="hljs-keyword">return</span> text<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">change_digit_to_zero</span>(<span class="hljs-params">text</span>):<br>    <span class="hljs-comment"># Match all numbers using regular expressions and replace them with the string &#x27;0&#x27;</span><br>    <span class="hljs-keyword">return</span> re.sub(<span class="hljs-string">r&#x27;\d&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, text)<br><br><span class="hljs-comment"># Process the text, remove punctuation and convert all to lowercase</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init_text</span>(<span class="hljs-params">text</span>):<br>    text = remove_punctuation(text)<br>    text = change_digit_to_zero(text)<br>    text = text.lower()<br>    <span class="hljs-keyword">return</span> text<br><br><span class="hljs-keyword">for</span> index, row <span class="hljs-keyword">in</span> train_data_df.iterrows():<br>    text = init_text(row[<span class="hljs-string">&#x27;Email&#x27;</span>])<br>    <span class="hljs-comment"># Put the processed text into different lists according to labels</span><br>    <span class="hljs-keyword">if</span>(row[<span class="hljs-string">&#x27;Label&#x27;</span>] == <span class="hljs-string">&#x27;spam&#x27;</span>):<br>        spam_emails.append(text)<br>    <span class="hljs-keyword">else</span>:<br>        ham_emails.append(text)<br><br><span class="hljs-comment"># Count the frequency of each word appearing in spam and normal files</span><br><span class="hljs-keyword">for</span> email <span class="hljs-keyword">in</span> spam_emails:<br>    words = email.split()   <span class="hljs-comment"># Split by one or more spaces</span><br>    <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> words:      <span class="hljs-comment"># Build a word bag</span><br>        spam_word_count[word] = spam_word_count.get(word, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span><br><br><span class="hljs-keyword">for</span> email <span class="hljs-keyword">in</span> ham_emails:<br>    words = email.split()<br>    <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> words:<br>        ham_word_count[word] = ham_word_count.get(word, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span><br><br><span class="hljs-comment"># Calculate prior probability</span><br>spam_prior_prob = <span class="hljs-built_in">len</span>(spam_emails) / (<span class="hljs-built_in">len</span>(spam_emails) + <span class="hljs-built_in">len</span>(ham_emails))<br>ham_prior_prob  = <span class="hljs-built_in">len</span>(ham_emails)  / (<span class="hljs-built_in">len</span>(spam_emails) + <span class="hljs-built_in">len</span>(ham_emails))<br><br></code></pre></td></tr></table></figure><p>(2) Prediction:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs py"><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">predict</span>(<span class="hljs-params">email</span>): <span class="hljs-comment"># Predicting whether it is spam based on email text</span><br>    text = init_text(email) <span class="hljs-comment"># Initialize text</span><br>    word_count = &#123;&#125;<br>    words = text.split()    <span class="hljs-comment"># Split by one or more spaces</span><br>    <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> words:      <span class="hljs-comment"># Build a word bag</span><br>        word_count[word] = word_count.get(word, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span><br>    <br>    spam_prob = spam_prior_prob<br>    ham_prob = ham_prior_prob<br>    <br>    <span class="hljs-keyword">for</span> word, count <span class="hljs-keyword">in</span> word_count.items():<br>        <span class="hljs-comment"># Laplace smoothing</span><br>        spam_prob *= (spam_word_count.get(word, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>) / (<span class="hljs-built_in">sum</span>(spam_word_count.values()) + <span class="hljs-built_in">len</span>(word_count))<br>        ham_prob *= (ham_word_count.get(word, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>) / (<span class="hljs-built_in">sum</span>(ham_word_count.values()) + <span class="hljs-built_in">len</span>(word_count))<br>        <span class="hljs-keyword">if</span>((spam_prob &lt; <span class="hljs-number">1e-6</span>) | (ham_prob &lt; <span class="hljs-number">1e-6</span>)):<br>            spam_prob *= <span class="hljs-number">1e6</span><br>            ham_prob *= <span class="hljs-number">1e6</span><br>    <br>    <span class="hljs-keyword">if</span>(spam_prob &gt; ham_prob):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;spam&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;ham&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="3-Result-1"><a href="#3-Result-1" class="headerlink" title="3.Result"></a>3.Result</h4><p><img src="/image/image-9.png"></p><p>(1) Training time</p><p>The total time of training and prediction is 6.44s</p><p>(2) Accuracy on the training set</p><p>Accuracy on the training set is 0.9850</p><p>(3) Accuracy on the test set</p><p><img src="/image/image-1.png"></p><p>The accuracy is 0.9452 without processing the numerical string.</p><p>Considering that phone numbers are a string of numbers, each spam phone call is different, but essentially can be seen as the same word. In order to make them play their due role, I converted all numbers to the number 0, and the accuracy was improved to 0.947.</p><p>At first, when dividing words, I directly deleted punctuation marks:</p><blockquote><p>text &#x3D; re.sub(r’[^\w\s]’, ‘’, text)</p></blockquote><p>Later, it was discovered that some words separated by symbols did not have spaces in between, such as ‘… ‘, After removing punctuation marks, the two words became connected, so I changed the data processing method to replace punctuation marks with spaces:</p><blockquote><p>text &#x3D; re.sub(r’[^\w\s]’, ‘ ‘, text)</p></blockquote><p>The accuracy has been improved to 0.9587.</p><h3 id="Naive-Bayes-Model-Based-on-TF-IDF"><a href="#Naive-Bayes-Model-Based-on-TF-IDF" class="headerlink" title="Naive Bayes Model Based on TF-IDF"></a>Naive Bayes Model Based on TF-IDF</h3><h4 id="1-Theory-2"><a href="#1-Theory-2" class="headerlink" title="1.Theory"></a>1.Theory</h4><p>Email text initialization:</p><ol><li>Replace punctuation with spaces</li><li>Replace all numbers with ‘0’</li><li>Convert all letters to lowercase</li><li>Divide each word into one or more spaces</li><li>Merge the segmentation results into a string with only one space between each word</li></ol><p>Call <em>CountVectorizer()</em> to segment each email into $n$ small word bags. Assuming all texts have m different words, each sample have $m$ features, representing the number of times each word appears in the email.</p><p>Call <em>TfidfTransformer()</em> to calculate the TF-IDF value of each small bag of words. At this point, the $m$ features of each sample become the corresponding TF-IDF values of $m$ words in the email text.</p><p>At this point, only a <em>Multidimensional Feature Classification</em> problem needs to be solved, which can be predicted through various methods such as naive Bayes model, logistic regression, support vector machine, etc.</p><h4 id="2-Code-2"><a href="#2-Code-2" class="headerlink" title="2.Code"></a>2.Code</h4><p>Critical Code:</p><p>(1) Data Processing：<em>CountVectorizer()</em> was called to construct the bag of words, and <em>TfidfTransformer()</em> was called to calculate the TF-IDF value.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">remove_punctuation</span>(<span class="hljs-params">text</span>):<br>    <span class="hljs-comment"># Use regular expressions to match any character that is not a letter, number, or space and replace it with a space</span><br>    text = re.sub(<span class="hljs-string">r&#x27;[^\w\s]&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, text)<br>    <span class="hljs-keyword">return</span> text<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">change_digit_to_zero</span>(<span class="hljs-params">text</span>):<br>    <span class="hljs-comment"># Match all numbers using regular expressions and replace them with the string &#x27;0&#x27;</span><br>    <span class="hljs-keyword">return</span> re.sub(<span class="hljs-string">r&#x27;\d&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, text)<br><br><span class="hljs-comment"># Initialize the text</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init_text</span>(<span class="hljs-params">text</span>):<br>    text = remove_punctuation(text)<br>    text = change_digit_to_zero(text)<br>    text = text.lower()<br>    words = text.split()<br>    <span class="hljs-comment"># Merge the segmentation results into a string with only one space between each word</span><br>    text = <span class="hljs-string">&quot; &quot;</span>.join(words)<br>    <span class="hljs-keyword">return</span> text<br><br>train_text_list = []<br>test_text_list = []<br><br><span class="hljs-comment"># Initialize the text and save it to a list</span><br><span class="hljs-keyword">for</span> index, row <span class="hljs-keyword">in</span> train_data_df.iterrows():<br>    text = init_text(row[<span class="hljs-string">&#x27;Email&#x27;</span>])<br>    train_text_list.append(text)<br><br><span class="hljs-keyword">for</span> index, row <span class="hljs-keyword">in</span> test_data_df.iterrows():<br>    text = init_text(row[<span class="hljs-string">&#x27;Email&#x27;</span>])<br>    test_text_list.append(text)<br><br><span class="hljs-comment"># Create a bag of words data structure</span><br>cv = CountVectorizer(max_features = <span class="hljs-number">3000</span>, max_df = <span class="hljs-number">0.1</span>, min_df = <span class="hljs-number">7</span>) <br>count = cv.fit_transform(train_text_list + test_text_list)<br>train_count = count[<span class="hljs-number">0</span> : <span class="hljs-built_in">len</span>(train_text_list)]<br>test_count = count[<span class="hljs-built_in">len</span>(train_text_list) : <span class="hljs-built_in">len</span>(train_text_list) + <span class="hljs-built_in">len</span>(test_text_list)]<br><br><span class="hljs-comment"># Calculate TF-IDF</span><br>tfidf = TfidfTransformer()<br>train_tfidf_matrix = tfidf.fit_transform(train_count)<br>test_tfidf_matrix = tfidf.fit_transform(test_count)<br></code></pre></td></tr></table></figure><p>(2) Model training: MultinomialNB() was called to implement a Naive Bayes model with a prior of polynomial distribution.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># Train Bayes model on the training set</span><br>bayes_model = MultinomialNB()<br>bayes_model.fit(train_tfidf_matrix, train_data_df[<span class="hljs-string">&#x27;Label&#x27;</span>].tolist())<br> <br><span class="hljs-comment"># Get the score on training set</span><br>score = bayes_model.score(train_tfidf_matrix, train_data_df[<span class="hljs-string">&#x27;Label&#x27;</span>].tolist())<br><span class="hljs-built_in">print</span>(score)<br><br><span class="hljs-comment"># Get the prediction result</span><br>y_pred = bayes_model.predict(test_tfidf_matrix)<br></code></pre></td></tr></table></figure><h4 id="3-Result-2"><a href="#3-Result-2" class="headerlink" title="3.Result"></a>3.Result</h4><p><img src="/image/image-10.png"></p><p>(1) Training time</p><p>The total training and prediction time is 0.27s</p><p>(2) Accuracy on the training set</p><p>The accuracy of prediction on the training set is 0.9901.</p><p>(3) Accuracy on the test set</p><p><img src="/image/image-3.png"></p><p>The accuracy of prediction on the test set is 0.9847.</p><h3 id="Logistic-regression"><a href="#Logistic-regression" class="headerlink" title="Logistic regression"></a>Logistic regression</h3><h4 id="1-Theory-3"><a href="#1-Theory-3" class="headerlink" title="1.Theory"></a>1.Theory</h4><p>By constructing TF-IDF as input features in the manner described above, it can be transformed into a classification problem with multidimensional features, and a logistic regression model can be used for prediction.</p><h4 id="2-Code-3"><a href="#2-Code-3" class="headerlink" title="2.Code"></a>2.Code</h4><p>Critical Code:</p><p>(1) Data Processing：Data Processing consistent with the naive Bayes model based on TF-IDF</p><p>(2) Model training: <em>LogisticRegressionCV</em> was called to implement the logistic regression model</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># Train logistic regression models on the training set</span><br>lr_model = LogisticRegressionCV(max_iter = <span class="hljs-number">100000</span>)<br>lr_model.fit(train_tfidf_matrix, train_data_df[<span class="hljs-string">&#x27;Label&#x27;</span>].tolist())<br> <br><span class="hljs-comment"># Get the score on training set</span><br>score = lr_model.score(train_tfidf_matrix, train_data_df[<span class="hljs-string">&#x27;Label&#x27;</span>].tolist())<br><span class="hljs-built_in">print</span>(score)<br><br><span class="hljs-comment"># Get the prediction result</span><br>y_pred = lr_model.predict(test_tfidf_matrix)<br></code></pre></td></tr></table></figure><h4 id="3-Result-3"><a href="#3-Result-3" class="headerlink" title="3.Result"></a>3.Result</h4><p><img src="/image/image-11.png"></p><p>(1) Training time</p><p>The total training and prediction time is 1.63s</p><p>(2) Accuracy on the training set</p><p>The accuracy of prediction on the training set is 1.0</p><p>(3) Accuracy on the test set</p><p><img src="/image/image-2.png"></p><p>The accuracy of prediction on the test set is 0.9865</p><h3 id="SVM"><a href="#SVM" class="headerlink" title="SVM"></a>SVM</h3><h4 id="1-Theory-4"><a href="#1-Theory-4" class="headerlink" title="1.Theory"></a>1.Theory</h4><p>By constructing TF-IDF as input features in the manner described above, it can be transformed into a classification problem with multidimensional features, and a SVM model can be used for prediction.</p><h4 id="2-Code-4"><a href="#2-Code-4" class="headerlink" title="2.Code"></a>2.Code</h4><p>critical code：</p><p>(1) Data Processing: It is basically the same as the Bayesian model and logistic regression model based on TF-IDF, with the only difference being the need to convert ‘ham’ and ‘spam’ into 0 and 1.</p><p>(2) The training process only changed the called model, and the other steps are basically the same.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># Convert the strings &#x27;ham&#x27; and &#x27;spam&#x27; of Label to 0 and 1, respectively</span><br>train_y = []<br><span class="hljs-keyword">for</span> index, row <span class="hljs-keyword">in</span> train_data_df.iterrows():<br>    label_bool = (row[<span class="hljs-string">&#x27;Label&#x27;</span>] == <span class="hljs-string">&#x27;spam&#x27;</span>)<br>    train_y.append(<span class="hljs-number">0.0</span> + label_bool)<br><br><span class="hljs-comment"># Train support vector machine models on the training set</span><br>SVR_model = LinearSVC()<br>SVR_model.fit(train_tfidf_matrix, train_y)<br><br><span class="hljs-comment"># Get the prediction result</span><br>y_pred = SVR_model.predict(test_tfidf_matrix)<br></code></pre></td></tr></table></figure><h4 id="3-Result-4"><a href="#3-Result-4" class="headerlink" title="3.Result"></a>3.Result</h4><p><img src="/image/image-14.png"></p><p>(1) Training time</p><p>The total training and prediction time is 0.35s</p><p>(2) Accuracy on the training set</p><p>The accuracy of prediction on the training set is 0.9978</p><p>(3) Accuracy on the test set</p><p><img src="/image/image-15.png"></p><p>The accuracy of prediction on the test set is 0.9874</p><h3 id="Other-classification-models-Decision-Tree-Random-Forest-Multilayer-Perceptron"><a href="#Other-classification-models-Decision-Tree-Random-Forest-Multilayer-Perceptron" class="headerlink" title="Other classification models (Decision Tree, Random Forest, Multilayer Perceptron)"></a>Other classification models (Decision Tree, Random Forest, Multilayer Perceptron)</h3><h4 id="1-Theory-5"><a href="#1-Theory-5" class="headerlink" title="1.Theory"></a>1.Theory</h4><p>Due to their data processing methods being roughly consistent with the Bayes, Logistic Regression, and SVM based on TF-IDF mentioned above, all of which are packet switching solutions for a multidimensional feature classification problem, they will not be further elaborated。</p><h4 id="2-Code-5"><a href="#2-Code-5" class="headerlink" title="2.Code"></a>2.Code</h4><p>Decision Tree：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># Train a SVM model on the training set</span><br>DTR_model = DecisionTreeRegressor()<br>DTR_model.fit(train_tfidf_matrix, train_y)<br><br><span class="hljs-comment"># Get the prediction result</span><br>y_pred = DTR_model.predict(test_tfidf_matrix)<br></code></pre></td></tr></table></figure><p>Random Forest：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># Train a Random Forest model on the training set</span><br>RF_model = RandomForestClassifier()<br>RF_model.fit(train_tfidf_matrix, train_y)<br><br><span class="hljs-comment"># Get the prediction result</span><br>y_pred = RF_model.predict(test_tfidf_matrix)<br></code></pre></td></tr></table></figure><p>Multilayer Perceptron：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># Train a MLP model on the training set</span><br>MLP_model = MLPRegressor()<br>MLP_model.fit(train_tfidf_matrix, train_y)<br><br><span class="hljs-comment"># Get the prediction result</span><br>y_pred = MLP_model.predict(test_tfidf_matrix)<br></code></pre></td></tr></table></figure><h4 id="3-Result-5"><a href="#3-Result-5" class="headerlink" title="3.Result"></a>3.Result</h4><p>Decision Tree:</p><p><img src="/image/image-16.png"></p><p><img src="/image/image-17.png"></p><p>Training time is 0.72s.</p><p>The accuracy of prediction on the training set is 0.9981.</p><p>Accuracy on the test set is 0.9390.</p><p>Random Forest：</p><p><img src="/image/image-19.png"></p><p><img src="/image/image-20.png"></p><p>Training time is 3.37s.</p><p>The accuracy of prediction on the training set is 0.9997.</p><p>The accuracy of prediction on the test set is 0.9874.</p><p>Multilayer Perceptron：</p><p><img src="/image/image-21.png"></p><p><img src="/image/image-23.png"></p><p>Training time is 8.51s.</p><p>The accuracy of prediction on the training set is 0.9968.</p><p>The accuracy of prediction on the test set is 0.9919.</p><h3 id="Combination-Model"><a href="#Combination-Model" class="headerlink" title="Combination Model"></a>Combination Model</h3><h4 id="1-Theory-6"><a href="#1-Theory-6" class="headerlink" title="1.Theory"></a>1.Theory</h4><p>I have implemented a Bayesian model and a Logistic Regression model based on TF-IDF, and their prediction accuracy is not much different. </p><p>Considering how to combine them, a natural idea is to let the two models make separate predictions. If the prediction results of the two models are the same, it is considered as the prediction result. Otherwise, we will use other methods to determine whether it is spam.</p><p>I printed out all the email texts with different prediction results from two models：</p><p><img src="/image/image-12.png"></p><p>I found that most of these samples are spam emails. I guess both models have a tendency to predict some spam emails as normal emails, so a simple judgment method was adopted: all emails with different prediction results from the two models were treated as spam emails.</p><p>I also tried using Bayesian model, logistic regression model, and support vector machine model to predict simultaneously, and then selected the most frequently occurring classification from the three results as the final classification, but the performance did not improve on the test set. But if samples with different results among them are treated as spam emails, their scores on the test set will be improved.</p><p>Afterwards, I tried using five models including Bayesian, logistic regression, SVM, random forest, and MLP for simultaneous prediction. The prediction results of the five models were voted to obtain the final result, but there was no improvement in accuracy on the test set. Considering that the model has a tendency to predict some spam emails as normal emails, I attempted to take spam as the final result if any of the five models predicted it as spam. The accuracy of the results on the test set was improved.</p><h4 id="2-Code-6"><a href="#2-Code-6" class="headerlink" title="2.Code"></a>2.Code</h4><p>critical code：</p><p>(1) Bayes and logistic regression combination model：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># Train logistic regression models on the training set</span><br>lr_model = LogisticRegressionCV(max_iter = <span class="hljs-number">100000</span>)<br>lr_model.fit(train_tfidf_matrix, train_data_df[<span class="hljs-string">&#x27;Label&#x27;</span>].tolist())<br><br><span class="hljs-comment"># Train Bayes models on the training set</span><br>bayes_model = MultinomialNB()<br>bayes_model.fit(train_tfidf_matrix, train_data_df[<span class="hljs-string">&#x27;Label&#x27;</span>].tolist())<br><br><span class="hljs-comment"># Get the prediction result</span><br>y_logistic_pred = lr_model.predict(test_tfidf_matrix)<br>y_bayes_pred = bayes_model.predict(test_tfidf_matrix)<br><br><span class="hljs-comment"># Get the result</span><br><span class="hljs-keyword">for</span> index, row <span class="hljs-keyword">in</span> test_data_df.iterrows():<br>    <span class="hljs-built_in">id</span> = row[<span class="hljs-string">&#x27;ID&#x27;</span>]<br>    label1 = y_logistic_pred[index]<br>    label2 = y_bayes_pred[index]<br>    <span class="hljs-keyword">if</span>(label1 == label2): <span class="hljs-comment"># Compare the prediction result of two models</span><br>        label = label1  <span class="hljs-comment"># If they are the same, use it as the prediction result</span><br>    <span class="hljs-keyword">else</span>:   <span class="hljs-comment"># mark it as spam</span><br>        <span class="hljs-built_in">print</span>(row[<span class="hljs-string">&#x27;Email&#x27;</span>])<br>        label = <span class="hljs-string">&#x27;spam&#x27;</span><br>    new_row = pd.DataFrame([[<span class="hljs-built_in">id</span>, label]], columns = [<span class="hljs-string">&#x27;ID&#x27;</span>, <span class="hljs-string">&#x27;Label&#x27;</span>])<br>    result_df = pd.concat([result_df, new_row], ignore_index = <span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>(2) Five models combination：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs py">SVR_model = LinearSVC()<br>SVR_model.fit(train_tfidf_matrix, train_y)<br> <br>lr_model = LogisticRegressionCV(max_iter = <span class="hljs-number">100000</span>)<br>lr_model.fit(train_tfidf_matrix, train_y)<br><br>bayes_model = MultinomialNB()<br>bayes_model.fit(train_tfidf_matrix, train_y)<br><br>MLP_model = MLPRegressor()<br>MLP_model.fit(train_tfidf_matrix, train_y)<br><br>RF_model = RandomForestClassifier()<br>RF_model.fit(train_tfidf_matrix, train_y)<br><br>y_logistic_pred = lr_model.predict(test_tfidf_matrix)<br>y_bayes_pred = bayes_model.predict(test_tfidf_matrix)<br>y_SVR_pred = SVR_model.predict(test_tfidf_matrix)<br>y_RF_pred = RF_model.predict(test_tfidf_matrix)<br>y_MLP_pred = MLP_model.predict(test_tfidf_matrix)<br><br>y_logistic_train = lr_model.predict(train_tfidf_matrix)<br>y_bayes_train = bayes_model.predict(train_tfidf_matrix)<br>y_SVR_train = SVR_model.predict(train_tfidf_matrix)<br>y_RF_train = RF_model.predict(train_tfidf_matrix)<br>y_MLP_train = MLP_model.predict(train_tfidf_matrix)<br><br>right_cnt = <span class="hljs-number">0</span><br>wrong_cnt = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> index, row <span class="hljs-keyword">in</span> train_data_df.iterrows():<br>    <span class="hljs-keyword">if</span> y_MLP_train[index] &gt; <span class="hljs-number">0.5</span>:<br>        y_MLP = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        y_MLP = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span>(y_logistic_train[index] + y_bayes_train[index] + y_SVR_train[index] + y_RF_train[index] + y_MLP &gt;= <span class="hljs-number">1.0</span>):<br>        label = <span class="hljs-string">&#x27;spam&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        label = <span class="hljs-string">&#x27;ham&#x27;</span><br>    <span class="hljs-keyword">if</span>(label == row[<span class="hljs-string">&#x27;Label&#x27;</span>]):<br>        right_cnt += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        wrong_cnt += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(right_cnt / (right_cnt + wrong_cnt))<br><br><span class="hljs-keyword">for</span> index, row <span class="hljs-keyword">in</span> test_data_df.iterrows():<br>    <span class="hljs-keyword">if</span> y_MLP_pred[index] &gt; <span class="hljs-number">0.5</span>:<br>        y_MLP = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        y_MLP = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span>(y_logistic_pred[index] + y_bayes_pred[index] + y_SVR_pred[index] + y_RF_pred[index] + y_MLP &gt;= <span class="hljs-number">1.0</span>):<br>        label = <span class="hljs-string">&#x27;spam&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        label = <span class="hljs-string">&#x27;ham&#x27;</span><br>    <span class="hljs-built_in">id</span> = row[<span class="hljs-string">&#x27;ID&#x27;</span>]<br>    new_row = pd.DataFrame([[<span class="hljs-built_in">id</span>, label]], columns = [<span class="hljs-string">&#x27;ID&#x27;</span>, <span class="hljs-string">&#x27;Label&#x27;</span>])<br>    result_df = pd.concat([result_df, new_row], ignore_index = <span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h4 id="3-Result-6"><a href="#3-Result-6" class="headerlink" title="3.Result"></a>3.Result</h4><p><img src="/image/image-13.png"></p><p><img src="/image/image-24.png"></p><p>(1) Training time</p><p>Combination of two models: The total training and prediction time is 1.91s.<br>Combination of five models: The total training and prediction time is 12.20s.</p><p>(2) Accuracy on the training set</p><p>Combination of two models: The accuracy of prediction on the training set is 1.0.<br>Combination of five models: The accuracy of prediction on the training set is 0.9991.</p><p>(3) Accuracy on the test set</p><p><img src="/image/image-4.png"></p><p><img src="/image/image-25.png"></p><p>Combination of two models: The accuracy of prediction on the test set is 0.9883.<br>Combination of five models: The accuracy of prediction on the test set is 0.9919.</p><h3 id="Result-and-Summary"><a href="#Result-and-Summary" class="headerlink" title="Result and Summary"></a>Result and Summary</h3><h4 id="Ranking"><a href="#Ranking" class="headerlink" title="Ranking"></a>Ranking</h4><p><img src="/image/image-26.png"></p><p>As shown above, among all the prediction results I submitted, the highest accuracy on the test set was 0.9919, ranking 11th</p><h4 id="Comparison-of-different-models"><a href="#Comparison-of-different-models" class="headerlink" title="Comparison of different models"></a>Comparison of different models</h4><table><thead><tr><th>Model</th><th>Training time</th><th>Accuracy on the training set</th><th>Accuracy on the test set</th></tr></thead><tbody><tr><td>Phone Number Checker</td><td>-</td><td>0.9457</td><td>0.9434</td></tr><tr><td>Bayes Classifier based on Bag of Words</td><td>6.44s</td><td>0.9850</td><td>0.9587</td></tr><tr><td>Bayes Classifier based on TF-IDF</td><td>0.27s</td><td>0.9901</td><td>0.9847</td></tr><tr><td>Logistic Regression</td><td>1.63s</td><td>1.0000</td><td>0.9865</td></tr><tr><td>SVM</td><td>0.35s</td><td>0.9978</td><td>0.9847</td></tr><tr><td>Decision Tree</td><td>0.72s</td><td>0.9981</td><td>0.9390</td></tr><tr><td>Random Forest</td><td>3.37s</td><td>0.9997</td><td>0.9847</td></tr><tr><td>MLP</td><td>8.51s</td><td>0.9968</td><td>0.9883</td></tr><tr><td>bayes-LR Combination Model</td><td>1.91s</td><td>1.0000</td><td>0.9883</td></tr><tr><td>bayes-LR-SVR-RF-MLP Combination Model</td><td>12.20s</td><td>0.9991</td><td>0.9919</td></tr></tbody></table><h4 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h4><p>Phone number checking was a small attempt made by observing the characteristics of spam emails in the training set, and the effect was quite good.</p><p>The accuracy of the Bayesian classifier based on TF-IDF is much higher than that based on bag of words, and the former is also much faster in training speed than the latter.</p><p>Among these TF-IDF based models, Bayesian classifiers, logistic regression, support vector machines, random forests, and multi-layer perceptrons all have good accuracy on the training set. Among them, the multi-layer perceptron has the longest training time and the highest accuracy on the test set. The training time for Random Forest is the second longest. The accuracy of logistic regression is slightly better than SVM and Bayesian classifiers, but the training speed is slower compared to them.</p><p>Originally, it was expected that the accuracy of the multi-layer perceptron would not be very high because its expressive power was too strong and it was prone to overfitting. However, surprisingly, it was the model with the best accuracy on the test set.</p><p>The decision tree exhibits overfitting, which may be related to its strong expressive ability and small dataset size.</p><p>The Bayesian logistic regression combination model also has good accuracy on the test set, and the combination model of the five models can achieve the best accuracy, indicating that these individual models do have a tendency to predict spam emails as normal emails on the test set.</p><p>Areas that can be improved:</p><ol><li><p>Each model is directly adjusted and uses default parameters without parameter tuning. Some models may improve their performance after parameter tuning</p></li><li><p>The text preprocessing is relatively rough and does not recognize and process special strings such as URLs, links, and garbled characters</p></li><li><p>Without multiple training sessions, the ‘Training time’ may not be precise</p></li><li><p>The “combination” between models is relatively simple and crude, and the single model’s “tendency to predict spam into normal mail” has not been explained in principle</p></li><li><p>In terms of interpretability, perhaps one or more collaborative formulas can be used for prediction, which has better interpretability and facilitates monitoring and correction</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>programming practice</category>
      
    </categories>
    
    
    <tags>
      
      <tag>machine learning</tag>
      
      <tag>data mining</tag>
      
      <tag>bayes classifier</tag>
      
      <tag>logistic regression</tag>
      
      <tag>SVM</tag>
      
      <tag>decision tree</tag>
      
      <tag>random forest</tag>
      
      <tag>MLP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Add a music player in your Hexo blog</title>
    <link href="/2024/07/24/Add-a-music-player-in-your-Hexo-blog/"/>
    <url>/2024/07/24/Add-a-music-player-in-your-Hexo-blog/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Add-a-music-player-in-your-Hexo-blog"><a href="#Add-a-music-player-in-your-Hexo-blog" class="headerlink" title="Add a music player in your Hexo blog"></a>Add a music player in your Hexo blog</h2><p>This article will introduce how to add a music player in your Hexo blog using the external link player provided by the music platform.</p><h3 id="external-link-player"><a href="#external-link-player" class="headerlink" title="external link player"></a>external link player</h3><p>This method is very simple. Just use a third-party music platform to find the songs you like, then generate a code for an external link player and insert it into the desired place on your blog.</p><p>For example, we can find any song or song list on music.163.com that does not require VIP and click on <em>Generate External Link Player</em>.</p><p><img src="/image/QQ_1721820058144.png" alt="修瓦修瓦"></p><p>Copy the generated HTML code.</p><p><img src="/image/QQ_1721820251140.png"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;iframe <span class="hljs-attribute">frameborder</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attribute">border</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attribute">marginwidth</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attribute">marginheight</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attribute">width</span>=330 <span class="hljs-attribute">height</span>=86 <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;//music.163.com/outchain/player?type=2&amp;id=1846310505&amp;auto=1&amp;height=66&quot;</span>&gt;&lt;/iframe&gt;<br></code></pre></td></tr></table></figure><p>Then place it in the position you want, such as at the footer of the page. Just select a place in <em>blog\themes\fluid\layout_partials</em></p><p>You can also paste it in your markdown post like this:</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1846310505&auto=1&height=66"></iframe><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=110 src="//music.163.com/outchain/player?type=0&id=2869389178&auto=1&height=90"></iframe><h3 id="Hexo-Tag-Aplayer"><a href="#Hexo-Tag-Aplayer" class="headerlink" title="Hexo-Tag-Aplayer"></a>Hexo-Tag-Aplayer</h3><p>You can also use the hexo-tag-aplayer plugin to add a music player in your blog. Since my hexo version is relatively low, I won’t go into detail about it.</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://blog.csdn.net/weixin_58068682/article/details/116612364">https://blog.csdn.net/weixin_58068682/article/details/116612364</a></p>]]></content>
    
    
    <categories>
      
      <category>programming practice</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>html</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>How to enable markdown mathematical formula rendering in hexo blog</title>
    <link href="/2024/07/24/How-to-enable-markdown-mathematical-formula-rendering-in-hexo-blog/"/>
    <url>/2024/07/24/How-to-enable-markdown-mathematical-formula-rendering-in-hexo-blog/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="How-to-enable-markdown-mathematical-formula-rendering-in-hexo-blog"><a href="#How-to-enable-markdown-mathematical-formula-rendering-in-hexo-blog" class="headerlink" title="How to enable markdown mathematical formula rendering in hexo blog"></a>How to enable markdown mathematical formula rendering in hexo blog</h2><p>After you build your personal blog with hexo, you may not notice that it cannot render mathematical formulas in markdown file normally. But you always run into this problem after a few posts. I will tell you how to enable this formula rendering function.</p><h3 id="Replace-Hexo’s-markdown-rendering-engine"><a href="#Replace-Hexo’s-markdown-rendering-engine" class="headerlink" title="Replace Hexo’s markdown rendering engine"></a>Replace Hexo’s markdown rendering engine</h3><p>The default rendering engine hexo-renderer-marked has some bugs, so it is best to uninstall it and replace it with a more stable one.</p><blockquote><p>npm uninstall hexo-renderer-marked –save<br>npm install hexo-renderer-kramed –save</p></blockquote><h3 id="Modify-the-node-modules-kramed-lib-rules-inline-js-file"><a href="#Modify-the-node-modules-kramed-lib-rules-inline-js-file" class="headerlink" title="Modify the node_modules\kramed\lib\rules\inline.js file"></a>Modify the node_modules\kramed\lib\rules\inline.js file</h3><p>There are still some bugs in the rendering engine that we need to fix.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>  escape<span class="hljs-operator">:</span> <span class="hljs-operator">/</span><span class="hljs-operator">^</span><span class="hljs-punctuation">\</span><span class="hljs-punctuation">\</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">\</span><span class="hljs-punctuation">\</span>`*&#123;&#125;\[\]()#$+\-.!_&gt;])/,<br>  escape: /^\\([`<span class="hljs-operator">*</span><span class="hljs-punctuation">\</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">\</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-comment">#$+\-.!_&gt;])/,</span><br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby">/<span class="hljs-regexp">/  em: /</span>^\b_((<span class="hljs-string">?:</span>__|<span class="hljs-params">[\s\S])+?)_\b</span>|^\*((<span class="hljs-string">?:\*\*</span>|<span class="hljs-params">[\s\S])+?)\*(?!\*)/,</span><br><span class="hljs-params">  em: /^\*((?:\*\*</span>|[\s\S])+<span class="hljs-string">?)\*</span>(<span class="hljs-string">?!\*</span>)/,<br></code></pre></td></tr></table></figure><h3 id="Modify-the-config-yml-file-of-your-theme"><a href="#Modify-the-config-yml-file-of-your-theme" class="headerlink" title="Modify the _config.yml file of your theme"></a>Modify the _config.yml file of your theme</h3><p>Find the math switch in the _config.yml file of your theme, and turn it on.</p><p><img src="/image/QQ_1721812617851.png"></p><h3 id="Redeploy-hexo"><a href="#Redeploy-hexo" class="headerlink" title="Redeploy hexo"></a>Redeploy hexo</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo clean <br>hexo <span class="hljs-selector-tag">g</span> -d<br></code></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://runninggump.github.io/2018/12/05/%E6%88%90%E5%8A%9F%E8%A7%A3%E5%86%B3%E5%9C%A8hexo%E4%B8%AD%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E7%9A%84%E9%97%AE%E9%A2%98/">https://runninggump.github.io/2018/12/05/%E6%88%90%E5%8A%9F%E8%A7%A3%E5%86%B3%E5%9C%A8hexo%E4%B8%AD%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E7%9A%84%E9%97%AE%E9%A2%98/</a></p>]]></content>
    
    
    <categories>
      
      <category>programming practice</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>html</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5 mysterious programming problems</title>
    <link href="/2024/07/24/5-mysterious-programming-problems/"/>
    <url>/2024/07/24/5-mysterious-programming-problems/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="5-mysterious-programming-problems"><a href="#5-mysterious-programming-problems" class="headerlink" title="5 mysterious programming problems"></a>5 mysterious programming problems</h2><p>Here are five mysterious programming problems and their solutions.</p><h3 id="1-Fib-2"><a href="#1-Fib-2" class="headerlink" title="1. Fib^2"></a>1. Fib^2</h3><p><img src="/image/QQ_1721790014702.png"></p><p>fib(20) is only 10946, so we can just figure out fib(i). Then figure out fib of fib(i)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD = <span class="hljs-number">1000000007</span>;<br><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> f[<span class="hljs-number">1000100</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    f[<span class="hljs-number">0</span>] = f[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>; i&lt;=n; ++i)<br>        f[i] = (f[i<span class="hljs-number">-1</span>] + f[i<span class="hljs-number">-2</span>]) %MOD;<br>    <span class="hljs-type">int</span> t = f[n];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">+1</span>; i&lt;=t; ++i)<br>        f[i] = (f[i<span class="hljs-number">-1</span>] + f[i<span class="hljs-number">-2</span>]) %MOD;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, f[t]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-The-sustainable-development-of-the-research-group"><a href="#2-The-sustainable-development-of-the-research-group" class="headerlink" title="2. The sustainable development of the research group"></a>2. The sustainable development of the research group</h3><p><img src="/image/QQ_1721790485315.png"></p><p>It’s easy to think of a greedy strategy: If the number of teacher A’s enrollment is x, the number of scientific research is y, they can produce (x+1)*y papers at most, using the first x*C time to enroll students and the last y*B time to do scientific research.</p><p>Because the K is less than 10001, so we can just enumerate x from 1 to K. Use $y &#x3D; ceil(K &#x2F; (x + 1) )$ to find the minimum value of y, while the x determined.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> B,C,K;<br><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> ans = <span class="hljs-number">1000000000</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;B, &amp;C, &amp;K);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>; x &lt;= K; ++x)&#123;<br>        <span class="hljs-type">int</span> y = (K+x) / (x<span class="hljs-number">+1</span>);<br>        <span class="hljs-keyword">if</span>(x*C + y*B &lt; ans)<br>            ans = x*C + y*B;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-The-date-of-the-scholarship"><a href="#3-The-date-of-the-scholarship" class="headerlink" title="3. The date of the scholarship"></a>3. The date of the scholarship</h3><p><img src="/image/QQ_1721790663223.png"></p><p>The range of n is so small that we can calculate it month by month: we know the day of the week on the 1st of the month, then we can calculate the day of the week on the 13th of the month. And then calculate the day of the week on the 1st of the next month based on the number of days in this month.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n, day;<br><br><span class="hljs-type">int</span> num[<span class="hljs-number">13</span>]=&#123;<span class="hljs-number">0</span>, <span class="hljs-number">31</span>, <span class="hljs-number">28</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>&#125;;<br><br><span class="hljs-type">int</span> cnt[<span class="hljs-number">8</span>];<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isleap</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(x%<span class="hljs-number">4</span>!=<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(x%<span class="hljs-number">400</span>==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(x%<span class="hljs-number">100</span>==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    day = <span class="hljs-number">1</span>; <span class="hljs-comment">//星期1</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1900</span>; i&lt;<span class="hljs-number">1900</span>+n; ++i)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>; j&lt;=<span class="hljs-number">12</span>; ++j)&#123;<br>            ++cnt[(day + <span class="hljs-number">12</span> - <span class="hljs-number">1</span>) % <span class="hljs-number">7</span> + <span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span>(j == <span class="hljs-number">2</span>)&#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isleap</span>(i))<br>                    day = (day + <span class="hljs-number">29</span> - <span class="hljs-number">1</span>)%<span class="hljs-number">7</span> + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span><br>                    day = (day + <span class="hljs-number">28</span> - <span class="hljs-number">1</span>)%<span class="hljs-number">7</span> + <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                day = (day + num[j] - <span class="hljs-number">1</span>)%<span class="hljs-number">7</span> + <span class="hljs-number">1</span>; <br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=<span class="hljs-number">7</span>; ++i)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, cnt[(i + <span class="hljs-number">5</span> - <span class="hljs-number">1</span>)%<span class="hljs-number">7</span> + <span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-Horse-traversal"><a href="#4-Horse-traversal" class="headerlink" title="4. Horse traversal"></a>4. Horse traversal</h3><p><img src="/image/QQ_1721790648382.png"></p><p>This is a classic breadth-first search problem. Just put the initial position in your queue and start your bfs.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN = <span class="hljs-number">410</span>;<br><br><span class="hljs-type">int</span> n, m, x, y;<br><br><span class="hljs-type">int</span> ans[MAXN][MAXN];<br><br><span class="hljs-type">int</span> dx[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">-2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>&#125;;<br><span class="hljs-type">int</span> dy[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-2</span> , <span class="hljs-number">-1</span>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span>&#123;<br>    <span class="hljs-type">int</span> x, y, d;<br>&#125; que[MAXN*MAXN], node;<br><br><span class="hljs-type">int</span> Head, Tail;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m&gt;&gt;x&gt;&gt;y;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>; j&lt;=m; ++j)<br>            ans[i][j] = <span class="hljs-number">-1</span>;<br>    ans[x][y] = <span class="hljs-number">0</span>;<br>    node.x = x;<br>    node.y = y;<br>    node.d = <span class="hljs-number">0</span>;<br>    que[++Tail] = node;<br>    <span class="hljs-type">int</span> vx, vy;<br>    <span class="hljs-keyword">while</span>(Head&lt;Tail)&#123;<br>        Point u = que[++Head];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">8</span>; ++i)&#123;<br>            vx = u.x + dx[i];<br>            vy = u.y + dy[i];<br>            <span class="hljs-keyword">if</span>(<span class="hljs-number">1</span>&lt;=vx &amp;&amp; vx&lt;=n &amp;&amp; <span class="hljs-number">1</span>&lt;=vy &amp;&amp;vy &lt;=m &amp;&amp; ans[vx][vy] == <span class="hljs-number">-1</span>)&#123;<br>                ans[vx][vy] = u.d + <span class="hljs-number">1</span>;<br>                node.x = vx;<br>                node.y = vy;<br>                node.d = u.d + <span class="hljs-number">1</span>;<br>                que[++Tail] = node;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>; j&lt;=m; ++j)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, ans[i][j]);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-COCI-‘21-Contest-2-4-Magneti"><a href="#5-COCI-‘21-Contest-2-4-Magneti" class="headerlink" title="5. [COCI ‘21 Contest 2 #4] Magneti"></a>5. [COCI ‘21 Contest 2 #4] Magneti</h3><p>problem link: <a href="https://dmoj.ca/problem/coci21c2p4">https://dmoj.ca/problem/coci21c2p4</a></p><p>solution link: <a href="https://dmoj.ca/problem/coci21c2p4/editorial">https://dmoj.ca/problem/coci21c2p4/editorial</a></p><p>Little Marko is bored of playing with shady cryptocurrencies such as Shiba Inu or XRC, which is why he decided to play with magnets. He has $n$ different magnets and a board which has $l$ available empty slots in a row, in which the magnets can be placed. Each pair of adjacent slots is exactly one centimeter apart. Each of the magnets has a radius of activity that is equal to $r_i$. This means that it will attract all magnets that are located strictly less than centimeters away (regardless of the radius of activity of the other magnet). It is possible that some magnets have the same radius of activity, but they are considered as different magnets.</p><p>Marko doesn’t like it when the magnets attract each other, so he is interested in the number of ways to place the magnets on the board so that no magnet attracts any other. All of the magnets should be placed on the board, and each empty slot may contain at most one magnet. Two ways of placing the magnets are considered different if there is a magnet which is at a different position in the first way than in the second way. As the required number can be quite large, you should output it modulo $10^9+7$.</p><p>$1 \leq n \leq 50$ and $n \leq l \leq 10000$</p><p><img src="/image/QQ_1721880971844.png"></p><p>We sort the magnets by increasing radius and build the permutation with the following dp:</p><blockquote><p>dp[i][j][d]: number of ways to arrange the first i magnets in j groups such that the sum of the lengths of the groups is d.</p></blockquote><p>One group represents a segment of the permutation that is being built and is comprised of magnets and the least amount of empty space between them. The transition of the dp actually consists of adding a new magnet to one of the groups, which can be done in three ways:</p><ol><li>creating a new group that is made just from this magnet</li><li>adding a magnet to one of the ends of one of the already existing groups</li><li>connecting two existing groups by placing the new magnet between them</li></ol><p>The solution has been explained very clearly in the link, but the state transition equation is not provided. </p><p>Here is the state transition equation, which might help you understand:</p><p>creating a new group that is made just from this magnet:</p><p>$dp[i+1][j+1][d+1] +&#x3D; dp[i][j][d]$</p><p>adding a magnet to one of the ends of one of the already existing groups:</p><p>$dp[i+1][j][d+r_{i+1}] +&#x3D; dp[i][j][d] \times j \times 2$</p><p>connecting two existing groups by placing the new magnet between them:</p><p>$dp[i+1][j-1][d + 2 \times r_{i+1} - 1] +&#x3D; 2 \times C^{2}_{j} \times dp[i][j][d]$</p><p>The answer is:</p><p>$\sum_{d&#x3D;1}^{l}{dp[n][1][d] \times C_{l-d+n}^{n}}$</p><p>boundary condition:</p><p>$dp[0][0][0] &#x3D; 1$</p><p>we can find inverse elements with linear complexity:</p><p>$P &#x3D; k * x + r$</p><p>$x^{-1} \equiv -\lfloor \frac{P}{i} \rfloor \times r^{-1} \ \ (mod \ P)$</p><p>Then preprocess the factorials and their inverse elements.</p><p>So we calcuate any combination number within O(1) time.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span> </span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN = <span class="hljs-number">55</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXL = <span class="hljs-number">10000</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> MOD = <span class="hljs-number">1000000007</span>;<br><br><span class="hljs-type">int</span> n, l, r[MAXL];<br> <br><span class="hljs-type">long</span> <span class="hljs-type">long</span> fac[MAXL<span class="hljs-number">+10</span>], inv[MAXL<span class="hljs-number">+10</span>], invfac[MAXL<span class="hljs-number">+10</span>];<br><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> dp[MAXN][MAXN][MAXL<span class="hljs-number">+10</span>];<br><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> n, <span class="hljs-type">long</span> <span class="hljs-type">long</span> m)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(n &lt; m)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> fac[n] * invfac[m] % MOD * invfac[n - m] % MOD;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;l);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;r[i]);<br><br>fac[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= MAXL; ++i)<br>fac[i] = fac[i - <span class="hljs-number">1</span>] * i % MOD;<br><br>inv[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= MAXL; ++i)<br>inv[i] = (MOD - MOD / i) * inv[MOD % i] % MOD;<br><br>invfac[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= MAXL; ++i)<br>invfac[i] = invfac[i - <span class="hljs-number">1</span>] * inv[i] % MOD;<br><br><span class="hljs-built_in">sort</span>(r + <span class="hljs-number">1</span>, r + n + <span class="hljs-number">1</span>);<br><br>dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; ++j)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> d = <span class="hljs-number">1</span>; d &lt;= l; ++d)&#123;<br>dp[i][j][d] = dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>][d - <span class="hljs-number">1</span>];<br><span class="hljs-keyword">if</span>(d &gt;= r[i])&#123;<br>dp[i][j][d] += (dp[i - <span class="hljs-number">1</span>][j][d - r[i]] * j * <span class="hljs-number">2</span>) % MOD;<br>dp[i][j][d] %= MOD;<br>&#125;<br><span class="hljs-keyword">if</span>(d &gt;= <span class="hljs-number">2</span> * r[i] - <span class="hljs-number">1</span>)&#123;<br>dp[i][j][d] += (dp[i - <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>][d - r[i] * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] * j % MOD * (j + <span class="hljs-number">1</span>)) % MOD;<br>dp[i][j][d] %= MOD;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> d = <span class="hljs-number">1</span>; d &lt;= l; ++d)&#123;<br>ans += dp[n][<span class="hljs-number">1</span>][d] * <span class="hljs-built_in">C</span>(l - d + n, n) %MOD;<br>ans %= MOD;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>programming practice</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bfs</tag>
      
      <tag>simulate</tag>
      
      <tag>dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>A few things you have to know before you join the Summer Camp held by MLDM Research Group of CAS, ICT</title>
    <link href="/2024/07/24/A-few-things-you-have-to-know-before-you-join-the-Summer-Camp-held-by-MLDM-Research-Group-of-CAS-ICT/"/>
    <url>/2024/07/24/A-few-things-you-have-to-know-before-you-join-the-Summer-Camp-held-by-MLDM-Research-Group-of-CAS-ICT/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="A-few-things-you-have-to-know-before-you-join-the-Summer-Camp-held-by-MLDM-Research-Group-of-CAS-ICT"><a href="#A-few-things-you-have-to-know-before-you-join-the-Summer-Camp-held-by-MLDM-Research-Group-of-CAS-ICT" class="headerlink" title="A few things you have to know before you join the Summer Camp held by MLDM Research Group of CAS, ICT"></a>A few things you have to know before you join the Summer Camp held by MLDM Research Group of CAS, ICT</h2><p>Before I give my advice, you might be curious about some details about the 2024 summer camp exam.</p><p>First of all, you need to know that there are different forms of examination for each group in the summer camp held by ICT, and this article is only for the MLDM group.</p><p>The MLDM group has a total of three exams, which are computer test, written test and interview.</p><h3 id="Computer-test"><a href="#Computer-test" class="headerlink" title="Computer test"></a>Computer test</h3><p>The duration of the computer test is 60 minutes, a total of 5 questions, similar to the ACM competition system. The only difference is that when the wrong submission is not punished. The final score according to the ranking, the time is relatively tight.</p><p>The first four questions were easy, but the fifth was difficult. In fact, no one had worked out the fifth question in the computer test.</p><p>You can see these computer test questions in another of my posts: <a href="/2024/07/24/5-mysterious-programming-problems/" title="5 mysterious programming problems">5 mysterious programming problems</a></p><p>It is confusing that the problem description given in the computer test did not include the original <em>Explanation for Sample Output</em> in the fifth question, making it difficult for candidates to understand the meaning of the question.</p><h3 id="Written-test"><a href="#Written-test" class="headerlink" title="Written test"></a>Written test</h3><p>The written test lasts 70 minutes and consists of 6 questions. The first problem among them examines the density function, edge probability, and expected value of polynomials for x and y in probability theory and quantitative statistics, and requires the use of double integrals. </p><p>The second question examines the eigenvalues of matrices, eigenvectors, and other knowledge of linear algebra. </p><p>The third and fourth questions examine the principles of neural networks and linear regression respectively. </p><p>The fifth and sixth questions must be answered in English. Read the chart and descript the feature of it; read the paper and write an abstract.</p><p>It should be noted that all questions are in English. Therefore, in the review before the exam, pay attention to the English vocabulary of various professional terms, and try to avoid the situation of not understanding the questions during the exam.</p><h3 id="Interview"><a href="#Interview" class="headerlink" title="Interview"></a>Interview</h3><p>In the interview, you will face seven teachers and ask different questions to each student, but the general content is similar. First of all, make a self-introduction in English, requiring no manuscript and no English content on the PPT.</p><p>After that, you may be asked to talk about your research experience in machine learning and data mining. And the teachers will ask some questions about it.</p><p>The teachers will then examine your concepts and foundational problems in calculus and linear algebra.</p><p>For example: What is continuous? What is infinity? What is the difference between a system of homogeneous linear equations and a system of non-homogeneous linear equations? How to determine whether a matrix has a solution?</p><p>Some programming knowledge is also asked, such as explaining the principles of a certain sorting algorithms.</p><p>Be prepared for other common interview questions, such as what do you know about cutting-edge scientific research in machine learning?</p><h3 id="Advice"><a href="#Advice" class="headerlink" title="Advice"></a>Advice</h3><p>Read the above content, you may have a basic understanding of the test. But there are still some things you may not be clear about.</p><ol><li><p>Contact a mentor of your choice in advance and do an internship in the MLDM group, if only it was too late. An appropriate time to contact an advisor is during the winter break of your junior year or at the beginning of the next semester.</p></li><li><p>Have a resume ready in advance, even if it’s not required in the camp’s registration materials. Because you will need it for the interview.</p></li><li><p>Memorize your English self-introduction.</p></li><li><p>Prepare an 800-word introduction that focuses on your research practices in machine learning and data mining. Chances are you’ll get an email at 10 p.m. the night before your 9:00 a.m. interview, asking you to fill out a form that includes an introduction of no more than 1,000 words.</p></li><li><p>If you’ve forgotten all about calculus and linear algebra, that’s perfectly normal. But if you don’t review carefully at least half a month in advance, you will regret it.</p></li><li><p>Prepare a powerpoint presentation introducing yourself in Chinese, not English.</p></li><li><p>Computer tests are graded according to ranking. Even if you’re not familiar with online judge, there’s no need to be nervous. Because the rank 1 made 4 questions, the machine test score is 85 points, and you made only 1 question, ranked 20th, you can still get 65 points. The difference between your scores is only the score of one problem in the written test.</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>experience sharing</category>
      
    </categories>
    
    
    <tags>
      
      <tag>machine learning</tag>
      
      <tag>data mining</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Weight Record</title>
    <link href="/2024/07/23/Weight-Record/"/>
    <url>/2024/07/23/Weight-Record/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Weight-chart"><a href="#Weight-chart" class="headerlink" title="Weight chart"></a>Weight chart</h3><table><thead><tr><th>Date</th><th>Weight (kg)</th><th>Running (km)</th><th>Cycling (km)</th><th>remark</th></tr></thead><tbody><tr><td>2024.7.23</td><td>93.2</td><td>2.34</td><td>8.11</td><td>have a little cold</td></tr><tr><td>2024.7.24</td><td>92.3</td><td>4.42</td><td>14.4</td><td>still have a little cough</td></tr><tr><td>2024.7.25</td><td>91.0</td><td>4.18</td><td>6.78</td><td>feel good</td></tr><tr><td>2024.7.26</td><td>90.9</td><td>3.79</td><td>8.48</td><td></td></tr><tr><td>2024.7.27</td><td>92.2</td><td>5.01</td><td>0</td><td></td></tr><tr><td>2024.7.28</td><td>91.2</td><td>0</td><td>20.7</td><td></td></tr><tr><td>2024.7.29</td><td>91.3</td><td>5.49</td><td>12.2</td><td>start a diet</td></tr><tr><td>2024.7.30</td><td>91.2</td><td>3.01</td><td>8.33</td><td>buy a new gravel bike</td></tr><tr><td>2024.7.31</td><td>90.8</td><td>4.54</td><td>11.4</td><td></td></tr><tr><td>2024.8.1</td><td>90.3</td><td>5.08</td><td>6.93</td><td></td></tr><tr><td>2024.8.2</td><td>90.4</td><td>0</td><td>12.7</td><td></td></tr><tr><td>2024.8.3</td><td>91.0</td><td>0</td><td>12.2</td><td></td></tr><tr><td>2024.8.4</td><td>91.1</td><td>0</td><td>9.24</td><td></td></tr><tr><td>2024.8.5</td><td>90.8</td><td></td><td></td><td></td></tr></tbody></table><h3 id="Line-Graph"><a href="#Line-Graph" class="headerlink" title="Line Graph"></a>Line Graph</h3><html>  <head>    <title>Weight Record</title>    <script src="https://cdn.anychart.com/releases/8.11.0/js/anychart-base.min.js"></script>    <style type="text/css">            html, body, #container {         width: 100%; height: 100%; margin: 0; padding: 0;       }     </style>  </head>  <body>      <div id="container"></div>    <script>        anychart.onDocumentReady(function () {            var data = [            ["2024.7.23", 93.2],            ["2024.7.24", 92.3],            ["2024.7.25", 91.0],            ["2024.7.26", 90.9],            ["2024.7.27", 92.2],            ["2024.7.28", 91.2],            ["2024.7.29", 91.3],            ["2024.7.30", 91.2],            ["2024.7.31", 90.8],            ["2024.8.1", 90.3],            ["2024.8.2", 90.4],            ["2024.8.3", 91.0],            ];            var dataSet = anychart.data.set(data);            var firstSeriesData = dataSet.mapAs({x: 0, value: 1});            var chart = anychart.line();            var firstSeries = chart.line(firstSeriesData);            firstSeries.name("Weight");            chart.legend().enabled(true);            chart.title("Weight Record");            chart.container("container");            chart.draw();        });    </script>  </body></html><h3 id="html-code-of-line-graph"><a href="#html-code-of-line-graph" class="headerlink" title="html code of line graph"></a>html code of line graph</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Weight Record<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.anychart.com/releases/8.11.0/js/anychart-base.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css">      </span><br><span class="language-css">      <span class="hljs-selector-tag">html</span>, <span class="hljs-selector-tag">body</span>, <span class="hljs-selector-id">#container</span> &#123; </span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>; <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>; <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>; </span><br><span class="language-css">      &#125; </span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        anychart.<span class="hljs-title function_">onDocumentReady</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> data = [</span><br><span class="language-javascript">            [<span class="hljs-string">&quot;2024.7.23&quot;</span>, <span class="hljs-number">93.2</span>],</span><br><span class="language-javascript">            [<span class="hljs-string">&quot;2024.7.24&quot;</span>, <span class="hljs-number">92.3</span>],</span><br><span class="language-javascript">            [<span class="hljs-string">&quot;2024.7.25&quot;</span>, <span class="hljs-number">91.0</span>],</span><br><span class="language-javascript">            <span class="hljs-comment">// ...</span></span><br><span class="language-javascript">            ];</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> dataSet = anychart.<span class="hljs-property">data</span>.<span class="hljs-title function_">set</span>(data);</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> firstSeriesData = dataSet.<span class="hljs-title function_">mapAs</span>(&#123;<span class="hljs-attr">x</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">1</span>&#125;);</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> chart = anychart.<span class="hljs-title function_">line</span>();</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> firstSeries = chart.<span class="hljs-title function_">line</span>(firstSeriesData);</span><br><span class="language-javascript">            firstSeries.<span class="hljs-title function_">name</span>(<span class="hljs-string">&quot;Weight&quot;</span>);</span><br><span class="language-javascript">            chart.<span class="hljs-title function_">legend</span>().<span class="hljs-title function_">enabled</span>(<span class="hljs-literal">true</span>);</span><br><span class="language-javascript">            chart.<span class="hljs-title function_">title</span>(<span class="hljs-string">&quot;Weight Record&quot;</span>);</span><br><span class="language-javascript">            chart.<span class="hljs-title function_">container</span>(<span class="hljs-string">&quot;container&quot;</span>);</span><br><span class="language-javascript">            chart.<span class="hljs-title function_">draw</span>();</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://www.freecodecamp.org/chinese/news/how-to-make-line-charts-in-javascript/">https://www.freecodecamp.org/chinese/news/how-to-make-line-charts-in-javascript/</a></p>]]></content>
    
    
    <categories>
      
      <category>daily life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>health</tag>
      
      <tag>exercise</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Decorate Your Blog</title>
    <link href="/2024/07/23/Decorate-Your-Blog/"/>
    <url>/2024/07/23/Decorate-Your-Blog/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Once you’ve built a blog with Hexo and Fluid themes, you can’t wait to spruce it up a bit. Here are some ways to modify ICONS, backgrounds, and loading GIFs</p><h3 id="change-the-img"><a href="#change-the-img" class="headerlink" title="change the img"></a>change the img</h3><p>First, you can put the image you want to replace into the <em>fluid&#x2F;source&#x2F;img</em> directory and change the location of the image reference in the <em>_config.yml</em> file in the <em>fluid</em> directory</p><p><img src="/image/QQ_1721730495293.png"></p><p>For example, I replaced fluid.png with moca.png, and replaced loading.gif with xiaobai.gif</p><p><img src="/image/xiaobai.gif" alt="&quot;Why this image still loading?&quot;"></p><h3 id="Random-background-picture"><a href="#Random-background-picture" class="headerlink" title="Random background picture"></a>Random background picture</h3><p>Create a new <em>random-bg</em> directory under <em>fluid\source\img</em>, and put your favorite background images in it</p><p>Edit the <em>banner.ejs</em> file in the <em>blog\themes\fluid\layout_partials\header</em> path</p><p><img src="/image/QQ_1721733720612.png"></p><p>Add the following code at the end of the file</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">getRandomNumber</span>(<span class="hljs-params">min, max</span>) &#123;<br>    min = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(min);<br>    max = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(max);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * (max - min + <span class="hljs-number">1</span>)) + min;<br>  &#125;<br><br><br><span class="hljs-keyword">var</span> randomNum = <span class="hljs-title function_">getRandomNumber</span>(<span class="hljs-number">0</span>, <span class="hljs-number">8</span>).<span class="hljs-title function_">toString</span>();<br><span class="hljs-keyword">var</span> banner_img = <span class="hljs-string">&quot;/img/random-bg/&quot;</span> + randomNum + <span class="hljs-string">&quot;.avif&quot;</span>;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;banner&#x27;</span>).<span class="hljs-title function_">removeAttribute</span>(<span class="hljs-string">&#x27;style&#x27;</span>)<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;banner&#x27;</span>).<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;style&#x27;</span>,<span class="hljs-string">`background: url(&#x27;<span class="hljs-subst">$&#123;banner_img&#125;</span>&#x27;) no-repeat center center; background-size: cover;`</span>)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>Note that the name and suffix of the image in the path must be correct</p><h3 id="Add-a-music-player"><a href="#Add-a-music-player" class="headerlink" title="Add a music player"></a>Add a music player</h3><p>You can also add a music player in your blog, the specific method can be found by clicking this link:</p><a href="/2024/07/24/Add-a-music-player-in-your-Hexo-blog/" title="Add a music player in your Hexo blog">Add a music player in your Hexo blog</a><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://linguoguang.com/2023/05/10/Hexo_Fluid%E9%9A%8F%E6%9C%BA%E8%83%8C%E6%99%AF%E5%9B%BE%E5%AE%9E%E7%8E%B0/">https://linguoguang.com/2023/05/10/Hexo_Fluid%E9%9A%8F%E6%9C%BA%E8%83%8C%E6%99%AF%E5%9B%BE%E5%AE%9E%E7%8E%B0/</a></p>]]></content>
    
    
    <categories>
      
      <category>programming practice</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Build up blog site using GitHub and Hexo</title>
    <link href="/2024/07/22/Build%20up%20blog%20site%20using%20GitHub%20and%20Hexo/"/>
    <url>/2024/07/22/Build%20up%20blog%20site%20using%20GitHub%20and%20Hexo/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Documentation for hexo: <a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p><h4 id="1-Prepare-a-GitHub-account"><a href="#1-Prepare-a-GitHub-account" class="headerlink" title="1.Prepare a GitHub account"></a>1.Prepare a GitHub account</h4><h4 id="2-Install-git"><a href="#2-Install-git" class="headerlink" title="2.Install git"></a>2.Install git</h4><h4 id="3-Install-NodeJS"><a href="#3-Install-NodeJS" class="headerlink" title="3.Install NodeJS"></a>3.Install NodeJS</h4><p>Download the installation package: <a href="https://nodejs.org/zh-cn/download/package-manager">https://nodejs.org/zh-cn/download/package-manager</a></p><p>Enter <em>node -v</em> in cmd to view the node version<br>Enter <em>npm -v</em> in cmd to view the npm version<br><img src="/image/QQ_1721559419254.png"></p><h4 id="4-Create-a-repository-on-github"><a href="#4-Create-a-repository-on-github" class="headerlink" title="4.Create a repository on github"></a>4.Create a repository on github</h4><p>Name the code repository <em>&lt;username&gt;.github.io</em></p><p><img src="/image/QQ_1721560001725.png"></p><p>Create a file named <em>index.html</em> for the home page</p><h4 id="4-Install-Hexo"><a href="#4-Install-Hexo" class="headerlink" title="4.Install Hexo"></a>4.Install Hexo</h4><p>Install Hexo: <a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install hexo-<span class="hljs-keyword">cli</span> -g<br></code></pre></td></tr></table></figure><p><img src="/image/QQ_1721561341643.png"></p><p>Enter <em>hexo -v</em> in cmd to view the node version</p><p><img src="/image/QQ_1721567770504.png"></p><h4 id="5-build-up-blog"><a href="#5-build-up-blog" class="headerlink" title="5.build up blog"></a>5.build up blog</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">hexo init <span class="hljs-keyword">blog</span><br><span class="hljs-keyword"></span>cd <span class="hljs-keyword">blog</span><br><span class="hljs-keyword"></span>npm <span class="hljs-keyword">install</span><br><span class="hljs-keyword"></span>hexo server<br></code></pre></td></tr></table></figure><p><img src="/image/QQ_1721567929877.png"></p><p><img src="/image/QQ_1721567957446.png"></p><p>Click on the link, we can see a web page</p><p><img src="/image/QQ_1721568074406.png"></p><h4 id="6-change-the-theme"><a href="#6-change-the-theme" class="headerlink" title="6.change the theme"></a>6.change the theme</h4><p>Fluid theme: <a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></p><p><img src="/image/QQ_1721568509428.png"></p><p>Download the zip pack, unzip it to the <em>themes</em> directory, and rename it <em>fluid</em></p><p><img src="/image/QQ_1721569399760.png"></p><p>change the <em>language</em> and <em>theme</em> in <em>_config.yml</em></p><p><img src="/image/QQ_1721569427361.png"></p><blockquote><p>language: zh-CN<br>theme: fluid</p></blockquote><p>enter <em>hexo new page about</em> to build an about page</p><p><img src="/image/QQ_1721569589234.png"></p><p>edit the about page</p><p><img src="/image/QQ_1721570431118.png"></p><h4 id="7-Create-an-article"><a href="#7-Create-an-article" class="headerlink" title="7.Create an article"></a>7.Create an article</h4><p>enter <em>$ hexo new [layout] &lt;title&gt;</em> to create a new article</p><p>Create an image directory in the source directory for storing pictures, use <em>![Alt text](image&#x2F;picture.png)</em> to insert the image</p><h4 id="8-Personalized-page-display"><a href="#8-Personalized-page-display" class="headerlink" title="8.Personalized page display"></a>8.Personalized page display</h4><p>Modify the _config.yml file in the blog directory</p><p><img src="/image/QQ_1721700618297.png"></p><p>Modify the _config.yml file in the fluid directory</p><p><img src="/image/QQ_1721699390516.png"></p><p><img src="/image/QQ_1721699719040.png"></p><h4 id="9-Added-the-read-volume-statistics-function"><a href="#9-Added-the-read-volume-statistics-function" class="headerlink" title="9.Added the read volume statistics function"></a>9.Added the read volume statistics function</h4><p>Sign up for LeanCloud account, complete real-name authentication, and verify email</p><p><a href="https://console.leancloud.cn/">https://console.leancloud.cn/</a></p><p>Create App, Open the APP and click Settings-App Keys</p><p>Modify the _config.yml file in the fluid directory</p><p><img src="/image/QQ_1721701934711.png"></p><p>Set app_id, app_key, server_url and other information to the corresponding positions</p><p><img src="/image/QQ_1721702000980.png"></p><p><img src="/image/QQ_1721702352582.png"></p><p>The effect:<br><img src="/image/QQ_1721702386582.png"></p><p>Display website PV and UV statistics</p><p><img src="/image/QQ_1721727947038.png"></p><p>The effect:<br><img src="/image/QQ_1721702709940.png"></p><h4 id="10-Enable-comment"><a href="#10-Enable-comment" class="headerlink" title="10.Enable comment"></a>10.Enable comment</h4><p>Modify the _config.yml file in the fluid directory</p><p><img src="/image/QQ_1721703690153.png"></p><p>Set app_id, app_key and other information to the corresponding positions</p><p><img src="/image/QQ_1721703864335.png"></p><p>The effect:<br><img src="/image/QQ_1721703893688.png"></p><h4 id="11-Publish-to-GitHub-pages"><a href="#11-Publish-to-GitHub-pages" class="headerlink" title="11.Publish to GitHub pages"></a>11.Publish to GitHub pages</h4><p>install hexo-deployer-git</p><blockquote><p>npm install hexo-deployer-git –save</p></blockquote><p><img src="/image/QQ_1721704197123.png"></p><p>Modify the _config.yml file in the Blog directory</p><p><img src="/image/QQ_1721704593340.png"></p><p>Deploy to github:</p><blockquote><p>hexo g -d</p></blockquote><p>Go to yjkyjkyjk.github.io in a browser:</p><p><img src="/image/QQ_1721704804877.png"></p><h4 id="12-Customize-the-domain-in-the-GitHub-Page"><a href="#12-Customize-the-domain-in-the-GitHub-Page" class="headerlink" title="12.Customize the domain in the GitHub Page"></a>12.Customize the domain in the GitHub Page</h4><p><a href="https://docs.github.com/zh/pages/configuring-a-custom-domain-for-your-github-pages-site/about-custom-domains-and-github-pages">https://docs.github.com/zh/pages/configuring-a-custom-domain-for-your-github-pages-site/about-custom-domains-and-github-pages</a></p><p>I registered a domain name in Tencent Cloud. The real-name authentication needs to wait for a few minutes</p><p>DNS resolution:<br><img src="/image/QQ_1721711114663.png"></p><p>add CNAME file in source directory</p><p>Enter your domain name in the CNAME file</p><p><img src="/image/QQ_1721711412388.png"></p><blockquote><p>hexo clean<br>hexo d -g</p></blockquote><p>Add a custom domain name on Github Pages</p><p><img src="/image/QQ_1721711734667.png"></p><p>Type yjk.ac.cn into your browser and you’ll see the blog page</p><p>If you type yjkyjkyjk.github.io in your browser, you will be redirected to yjk.ac.cn</p><h4 id="Unexpected-problems"><a href="#Unexpected-problems" class="headerlink" title="Unexpected problems"></a>Unexpected problems</h4><ol><li>npm path is faulty</li></ol><p><img src="/image/QQ_1721560564053.png"></p><p>This problem is probably caused by the fact that I merged disk C with disk D, resulting in no disk D at present</p><p><img src="/image/QQ_1721560937623.png"></p><p>Open <em>.npmrc</em> with Wordpad and change D: to C:</p><p><img src="/image/QQ_1721560993499.png"></p><p>set prefix and cache:</p><blockquote><p>npm config set prefix “C:\Program Files\nodejs\node_global”</p></blockquote><blockquote><p>npm config set cache “C:\Program Files\nodejs\node_global”</p></blockquote><p>add NODE_PATH:</p><p><img src="/image/QQ_1721567484384.png"></p><ol start="2"><li>Network delay problem：</li></ol><p><img src="/image/QQ_1721561154854.png"></p><p>use a VPN:</p><p><img src="/image/QQ_1721561395275.png"></p><ol start="3"><li>hexo not found</li></ol><p><img src="/image/QQ_1721561758547.png"></p><p>NodeJS was probably not added to the path</p><p><img src="/image/QQ_1721567664601.png"></p><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><p><a href="https://blog.csdn.net/yaorongke/article/details/119089190">https://blog.csdn.net/yaorongke/article/details/119089190</a></p><p><a href="https://cloud.tencent.com/developer/article/2142661">https://cloud.tencent.com/developer/article/2142661</a></p>]]></content>
    
    
    <categories>
      
      <category>programming practice</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/07/21/hello-world/"/>
    <url>/2024/07/21/hello-world/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
