<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Install Ubuntu Linux in VMware</title>
    <link href="/2024/07/27/Install-Ubuntu-Linux-in-VMware/"/>
    <url>/2024/07/27/Install-Ubuntu-Linux-in-VMware/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Install-Ubuntu-Linux-in-VMware"><a href="#Install-Ubuntu-Linux-in-VMware" class="headerlink" title="Install Ubuntu Linux in VMware"></a>Install Ubuntu Linux in VMware</h2><p>Installing the Linux operating system on a virtual machine is simpler and more convenient to use than installing it on a physical machine.</p><p>Although it runs much slower than being installed on a physical machine, it is more than enough for simple programming projects.</p><p>Here is how to install Ubuntu Linux on VMware.</p><h3 id="Download-VMware-Workstation"><a href="#Download-VMware-Workstation" class="headerlink" title="Download VMware Workstation"></a>Download VMware Workstation</h3><p>download link: <a href="https://support.broadcom.com/group/ecx/productdownloads?subfamily=VMware%20Workstation%20Pro">https://support.broadcom.com/group/ecx/productdownloads?subfamily=VMware%20Workstation%20Pro</a></p><p>Before browsing the webpage, we need register an account and log in.</p><p><img src="/image/QQ_1722079371091.png"></p><p>Click “VMware Workstation Pro 17.0 for Personal Use(Windows)” and download the latest version.</p><p>We need to complete the personal profile information before downloading.</p><p><img src="/image/QQ_1722079813704.png"></p><p>Click the download button and wait for a few minutes.</p><h3 id="Install-VMware"><a href="#Install-VMware" class="headerlink" title="Install VMware"></a>Install VMware</h3><p>Run the exe file we have downloaded to install VMware.</p><p>Choose the installation location.<br><img src="/image/QQ_1722080370769.png"></p><p>Add to system path.<br><img src="/image/QQ_1722080491096.png"></p><p>After installation is complete, check “Personal Use”, no license required.</p><p><img src="/image/QQ_1722080692443.png" alt="installed successfully"></p><h3 id="Check-the-network-adapter"><a href="#Check-the-network-adapter" class="headerlink" title="Check the network adapter"></a>Check the network adapter</h3><p>After installing VMware, it is necessary to confirm whether your computer has installed two network adapters: <code>VMware Network Adapter VMnet1</code> and <code>VMware Network Adapter VMnet8</code>.</p><p>Enter <code>ipconfig</code> in the cmd window to view network configuration.</p><p>Here we can see these two network adapters.<br><img src="/image/QQ_1722081145510.png"></p><p>If you cannot find these two network adapters, you may need to uninstall and reinstall VMware.</p><h3 id="Download-Ubuntu"><a href="#Download-Ubuntu" class="headerlink" title="Download Ubuntu"></a>Download Ubuntu</h3><p>download link: <a href="https://ubuntu.com/download/desktop">https://ubuntu.com/download/desktop</a></p><p>Download the latest version of Ubuntu.<br><img src="/image/QQ_1722081385587.png"></p><p>Be patient and wait.</p><h3 id="Create-a-new-virtual-machine"><a href="#Create-a-new-virtual-machine" class="headerlink" title="Create a new virtual machine"></a>Create a new virtual machine</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://blog.csdn.net/m0_70885101/article/details/137694608">https://blog.csdn.net/m0_70885101/article/details/137694608</a></p><p><a href="https://blog.csdn.net/SHERLOCK0226/article/details/139748840">https://blog.csdn.net/SHERLOCK0226/article/details/139748840</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Spam classification using classic models</title>
    <link href="/2024/07/26/Spam-classification-using-classic-models/"/>
    <url>/2024/07/26/Spam-classification-using-classic-models/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Spam-Classification"><a href="#Spam-Classification" class="headerlink" title="Spam Classification"></a>Spam Classification</h2><p>This is the final assignment of undergraduate elective course of UCAS: <em>Data Mining</em>, which may be helpful to you.</p><h3 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h3><p>problem link: <a href="https://challenge.datacastle.cn/v3/cmptDetail.html?id=352">https://challenge.datacastle.cn/v3/cmptDetail.html?id=352</a></p><p>Given email text information, establish a classification model to determine which emails are spam.</p><h3 id="Phone-Number-Checker"><a href="#Phone-Number-Checker" class="headerlink" title="Phone Number Checker"></a>Phone Number Checker</h3><h4 id="1-Theory"><a href="#1-Theory" class="headerlink" title="1.Theory"></a>1.Theory</h4><p>After downloading the training and testing data, I observed the spam text in the training set, trying to find some obvious features. I found that the vast majority of spam emails would contain “phone numbers”, usually a string of 11 in length, sometimes connected by characters such as spaces or ‘-‘ in the middle of the numbers.</p><p><img src="image/image-7.png" alt=""><br><img src="image/image-8.png" alt=""></p><p>So a natural idea is to mark all emails with phone numbers as spam, otherwise they are considered normal emails. Method for identifying phone numbers: Use a sliding window to check all consecutive 13 digit strings in the text. If 9 or more digits are digits, it is considered a phone number. For example, “0871-872-9755” will be recognized as a phone number.</p><h4 id="2-Code"><a href="#2-Code" class="headerlink" title="2.Code"></a>2.Code</h4><p>Critical Code:</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_phone_number</span>(<span class="hljs-params">text</span>):<br>    <span class="hljs-comment"># Count the number of digits in the string</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">count_digits</span>(<span class="hljs-params">s</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(c.isdigit() <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s)<br><br>    <span class="hljs-comment"># Check every window of length 13 in the text</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(text) - <span class="hljs-number">12</span>):<br>        <span class="hljs-keyword">if</span>(count_digits(text[i:i+<span class="hljs-number">13</span>]) &gt;= <span class="hljs-number">9</span>):<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br><span class="hljs-comment"># 构建输出</span><br><span class="hljs-keyword">for</span> index, row <span class="hljs-keyword">in</span> test_data_df.iterrows():<br>    <span class="hljs-built_in">id</span> = row[<span class="hljs-string">&#x27;ID&#x27;</span>]<br>    <span class="hljs-keyword">if</span> check_phone_number(row[<span class="hljs-string">&#x27;Email&#x27;</span>]):    <span class="hljs-comment"># If a phone number is recognized in the text</span><br>        Label = <span class="hljs-string">&#x27;spam&#x27;</span>  <span class="hljs-comment"># Mark as spam</span><br>    <span class="hljs-keyword">else</span>:<br>        Label = <span class="hljs-string">&#x27;ham&#x27;</span><br>    new_row = pd.DataFrame([[<span class="hljs-built_in">id</span>, Label]], columns = [<span class="hljs-string">&#x27;ID&#x27;</span>, <span class="hljs-string">&#x27;Label&#x27;</span>])<br>    result_df = pd.concat([result_df, new_row], ignore_index = <span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h4 id="3-Result"><a href="#3-Result" class="headerlink" title="3.Result"></a>3.Result</h4><p><img src="image/image-18.png" alt=""><br><img src="image/image.png" alt=""></p><p>The accuracy on the training set is about 0.9457, and the accuracy on the test set is about 0.9434.</p><p>The initial way to identify phone numbers was to have 11 or more digits in a 13 length sliding window, with an accuracy rate of 0.9372.</p><p>It was discovered that some numbers were less than 11 digits and should still be recognized as phone numbers. The method of identifying phone numbers was changed to a 13 length sliding window with 9 or more digits. The accuracy of the test set was improved to 0.9434.</p><h3 id="Naive-Bayes-regression-model-based-on-bag-of-words"><a href="#Naive-Bayes-regression-model-based-on-bag-of-words" class="headerlink" title="Naive Bayes regression model based on bag of words"></a>Naive Bayes regression model based on bag of words</h3><h4 id="1-Theory-1"><a href="#1-Theory-1" class="headerlink" title="1.Theory"></a>1.Theory</h4><p>Build a big word bag for all spam emails and a big word bag for all normal emails.</p><p>First, calculate the prior probability: take the proportion of spam and normal emails in the training set samples as the prior probability.</p><p>Then multiply the frequency of each word appearing in spam emails to obtain the probability that the email is spam, and multiply the probability of each word appearing in normal emails to obtain the probability that the email is normal. Compare the two probabilities and take the larger one as the prediction result.</p><p>Laplace smoothing was used to avoid the problem of calculating a probability of 0 when the frequency of a word in the bag of words is 0.</p><h4 id="2-Code-1"><a href="#2-Code-1" class="headerlink" title="2.Code"></a>2.Code</h4><p>Critical Code:</p><p>(1) Data Processing：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">remove_punctuation</span>(<span class="hljs-params">text</span>):<br>    <span class="hljs-comment"># Use regular expressions to match any character that is not a letter, number, or space and replace it with a space</span><br>    text = re.sub(<span class="hljs-string">r&#x27;[^\w\s]&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, text)<br>    <span class="hljs-keyword">return</span> text<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">change_digit_to_zero</span>(<span class="hljs-params">text</span>):<br>    <span class="hljs-comment"># Match all numbers using regular expressions and replace them with the string &#x27;0&#x27;</span><br>    <span class="hljs-keyword">return</span> re.sub(<span class="hljs-string">r&#x27;\d&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, text)<br><br><span class="hljs-comment"># Process the text, remove punctuation and convert all to lowercase</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init_text</span>(<span class="hljs-params">text</span>):<br>    text = remove_punctuation(text)<br>    text = change_digit_to_zero(text)<br>    text = text.lower()<br>    <span class="hljs-keyword">return</span> text<br><br><span class="hljs-keyword">for</span> index, row <span class="hljs-keyword">in</span> train_data_df.iterrows():<br>    text = init_text(row[<span class="hljs-string">&#x27;Email&#x27;</span>])<br>    <span class="hljs-comment"># Put the processed text into different lists according to labels</span><br>    <span class="hljs-keyword">if</span>(row[<span class="hljs-string">&#x27;Label&#x27;</span>] == <span class="hljs-string">&#x27;spam&#x27;</span>):<br>        spam_emails.append(text)<br>    <span class="hljs-keyword">else</span>:<br>        ham_emails.append(text)<br><br><span class="hljs-comment"># Count the frequency of each word appearing in spam and normal files</span><br><span class="hljs-keyword">for</span> email <span class="hljs-keyword">in</span> spam_emails:<br>    words = email.split()   <span class="hljs-comment"># Split by one or more spaces</span><br>    <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> words:      <span class="hljs-comment"># Build a word bag</span><br>        spam_word_count[word] = spam_word_count.get(word, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span><br><br><span class="hljs-keyword">for</span> email <span class="hljs-keyword">in</span> ham_emails:<br>    words = email.split()<br>    <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> words:<br>        ham_word_count[word] = ham_word_count.get(word, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span><br><br><span class="hljs-comment"># Calculate prior probability</span><br>spam_prior_prob = <span class="hljs-built_in">len</span>(spam_emails) / (<span class="hljs-built_in">len</span>(spam_emails) + <span class="hljs-built_in">len</span>(ham_emails))<br>ham_prior_prob  = <span class="hljs-built_in">len</span>(ham_emails)  / (<span class="hljs-built_in">len</span>(spam_emails) + <span class="hljs-built_in">len</span>(ham_emails))<br><br></code></pre></td></tr></table></figure><p>(2) Prediction:<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs py"><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">predict</span>(<span class="hljs-params">email</span>): <span class="hljs-comment"># Predicting whether it is spam based on email text</span><br>    text = init_text(email) <span class="hljs-comment"># Initialize text</span><br>    word_count = &#123;&#125;<br>    words = text.split()    <span class="hljs-comment"># Split by one or more spaces</span><br>    <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> words:      <span class="hljs-comment"># Build a word bag</span><br>        word_count[word] = word_count.get(word, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span><br>    <br>    spam_prob = spam_prior_prob<br>    ham_prob = ham_prior_prob<br>    <br>    <span class="hljs-keyword">for</span> word, count <span class="hljs-keyword">in</span> word_count.items():<br>        <span class="hljs-comment"># Laplace smoothing</span><br>        spam_prob *= (spam_word_count.get(word, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>) / (<span class="hljs-built_in">sum</span>(spam_word_count.values()) + <span class="hljs-built_in">len</span>(word_count))<br>        ham_prob *= (ham_word_count.get(word, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>) / (<span class="hljs-built_in">sum</span>(ham_word_count.values()) + <span class="hljs-built_in">len</span>(word_count))<br>        <span class="hljs-keyword">if</span>((spam_prob &lt; <span class="hljs-number">1e-6</span>) | (ham_prob &lt; <span class="hljs-number">1e-6</span>)):<br>            spam_prob *= <span class="hljs-number">1e6</span><br>            ham_prob *= <span class="hljs-number">1e6</span><br>    <br>    <span class="hljs-keyword">if</span>(spam_prob &gt; ham_prob):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;spam&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;ham&#x27;</span><br></code></pre></td></tr></table></figure></p><h4 id="3-Result-1"><a href="#3-Result-1" class="headerlink" title="3.Result"></a>3.Result</h4><p><img src="image/image-9.png" alt=""></p><p>(1) Training time</p><p>The total time of training and prediction is 6.44s</p><p>(2) Accuracy on the training set</p><p>Accuracy on the training set is 0.9850</p><p>(3) Accuracy on the test set</p><p><img src="image/image-1.png" alt=""></p><p>The accuracy is 0.9452 without processing the numerical string.</p><p>Considering that phone numbers are a string of numbers, each spam phone call is different, but essentially can be seen as the same word. In order to make them play their due role, I converted all numbers to the number 0, and the accuracy was improved to 0.947.</p><p>At first, when dividing words, I directly deleted punctuation marks:</p><blockquote><p>text = re.sub(r’<sup><a href="#fn_\w\s" id="reffn_\w\s">\w\s</a></sup>‘, ‘’, text)</p></blockquote><p>Later, it was discovered that some words separated by symbols did not have spaces in between, such as ‘… ‘, After removing punctuation marks, the two words became connected, so I changed the data processing method to replace punctuation marks with spaces:</p><blockquote><p>text = re.sub(r’<sup><a href="#fn_\w\s" id="reffn_\w\s">\w\s</a></sup>‘, ‘ ‘, text)</p></blockquote><p>The accuracy has been improved to 0.9587.</p><h3 id="Naive-Bayes-Model-Based-on-TF-IDF"><a href="#Naive-Bayes-Model-Based-on-TF-IDF" class="headerlink" title="Naive Bayes Model Based on TF-IDF"></a>Naive Bayes Model Based on TF-IDF</h3><h4 id="1-Theory-2"><a href="#1-Theory-2" class="headerlink" title="1.Theory"></a>1.Theory</h4><p>Email text initialization:</p><ol><li>Replace punctuation with spaces</li><li>Replace all numbers with ‘0’</li><li>Convert all letters to lowercase</li><li>Divide each word into one or more spaces</li><li>Merge the segmentation results into a string with only one space between each word</li></ol><p>Call <em>CountVectorizer()</em> to segment each email into $n$ small word bags. Assuming all texts have m different words, each sample have $m$ features, representing the number of times each word appears in the email.</p><p>Call <em>TfidfTransformer()</em> to calculate the TF-IDF value of each small bag of words. At this point, the $m$ features of each sample become the corresponding TF-IDF values of $m$ words in the email text.</p><p>At this point, only a <em>Multidimensional Feature Classification</em> problem needs to be solved, which can be predicted through various methods such as naive Bayes model, logistic regression, support vector machine, etc.</p><h4 id="2-Code-2"><a href="#2-Code-2" class="headerlink" title="2.Code"></a>2.Code</h4><p>Critical Code:</p><p>(1) Data Processing：<em>CountVectorizer()</em> was called to construct the bag of words, and <em>TfidfTransformer()</em> was called to calculate the TF-IDF value.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">def</span> <span class="hljs-title function_">remove_punctuation</span>(<span class="hljs-params">text</span>):<br>    <span class="hljs-comment"># Use regular expressions to match any character that is not a letter, number, or space and replace it with a space</span><br>    text = re.sub(<span class="hljs-string">r&#x27;[^\w\s]&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, text)<br>    <span class="hljs-keyword">return</span> text<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">change_digit_to_zero</span>(<span class="hljs-params">text</span>):<br>    <span class="hljs-comment"># Match all numbers using regular expressions and replace them with the string &#x27;0&#x27;</span><br>    <span class="hljs-keyword">return</span> re.sub(<span class="hljs-string">r&#x27;\d&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, text)<br><br><span class="hljs-comment"># Initialize the text</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init_text</span>(<span class="hljs-params">text</span>):<br>    text = remove_punctuation(text)<br>    text = change_digit_to_zero(text)<br>    text = text.lower()<br>    words = text.split()<br>    <span class="hljs-comment"># Merge the segmentation results into a string with only one space between each word</span><br>    text = <span class="hljs-string">&quot; &quot;</span>.join(words)<br>    <span class="hljs-keyword">return</span> text<br><br>train_text_list = []<br>test_text_list = []<br><br><span class="hljs-comment"># Initialize the text and save it to a list</span><br><span class="hljs-keyword">for</span> index, row <span class="hljs-keyword">in</span> train_data_df.iterrows():<br>    text = init_text(row[<span class="hljs-string">&#x27;Email&#x27;</span>])<br>    train_text_list.append(text)<br><br><span class="hljs-keyword">for</span> index, row <span class="hljs-keyword">in</span> test_data_df.iterrows():<br>    text = init_text(row[<span class="hljs-string">&#x27;Email&#x27;</span>])<br>    test_text_list.append(text)<br><br><span class="hljs-comment"># Create a bag of words data structure</span><br>cv = CountVectorizer(max_features = <span class="hljs-number">3000</span>, max_df = <span class="hljs-number">0.1</span>, min_df = <span class="hljs-number">7</span>) <br>count = cv.fit_transform(train_text_list + test_text_list)<br>train_count = count[<span class="hljs-number">0</span> : <span class="hljs-built_in">len</span>(train_text_list)]<br>test_count = count[<span class="hljs-built_in">len</span>(train_text_list) : <span class="hljs-built_in">len</span>(train_text_list) + <span class="hljs-built_in">len</span>(test_text_list)]<br><br><span class="hljs-comment"># Calculate TF-IDF</span><br>tfidf = TfidfTransformer()<br>train_tfidf_matrix = tfidf.fit_transform(train_count)<br>test_tfidf_matrix = tfidf.fit_transform(test_count)<br></code></pre></td></tr></table></figure><p>(2) Model training: MultinomialNB() was called to implement a Naive Bayes model with a prior of polynomial distribution.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># Train Bayes model on the training set</span><br>bayes_model = MultinomialNB()<br>bayes_model.fit(train_tfidf_matrix, train_data_df[<span class="hljs-string">&#x27;Label&#x27;</span>].tolist())<br> <br><span class="hljs-comment"># Get the score on training set</span><br>score = bayes_model.score(train_tfidf_matrix, train_data_df[<span class="hljs-string">&#x27;Label&#x27;</span>].tolist())<br><span class="hljs-built_in">print</span>(score)<br><br><span class="hljs-comment"># Get the prediction result</span><br>y_pred = bayes_model.predict(test_tfidf_matrix)<br></code></pre></td></tr></table></figure><h4 id="3-Result-2"><a href="#3-Result-2" class="headerlink" title="3.Result"></a>3.Result</h4><p><img src="image/image-10.png" alt=""></p><p>(1) Training time</p><p>The total training and prediction time is 0.27s</p><p>(2) Accuracy on the training set</p><p>The accuracy of prediction on the training set is 0.9901.</p><p>(3) Accuracy on the test set</p><p><img src="image/image-3.png" alt=""></p><p>The accuracy of prediction on the test set is 0.9847.</p><h3 id="Logistic-regression"><a href="#Logistic-regression" class="headerlink" title="Logistic regression"></a>Logistic regression</h3><h4 id="1-Theory-3"><a href="#1-Theory-3" class="headerlink" title="1.Theory"></a>1.Theory</h4><p>By constructing TF-IDF as input features in the manner described above, it can be transformed into a classification problem with multidimensional features, and a logistic regression model can be used for prediction.</p><h4 id="2-Code-3"><a href="#2-Code-3" class="headerlink" title="2.Code"></a>2.Code</h4><p>Critical Code:</p><p>(1) Data Processing：Data Processing consistent with the naive Bayes model based on TF-IDF</p><p>(2) Model training: <em>LogisticRegressionCV</em> was called to implement the logistic regression model</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># Train logistic regression models on the training set</span><br>lr_model = LogisticRegressionCV(max_iter = <span class="hljs-number">100000</span>)<br>lr_model.fit(train_tfidf_matrix, train_data_df[<span class="hljs-string">&#x27;Label&#x27;</span>].tolist())<br> <br><span class="hljs-comment"># Get the score on training set</span><br>score = lr_model.score(train_tfidf_matrix, train_data_df[<span class="hljs-string">&#x27;Label&#x27;</span>].tolist())<br><span class="hljs-built_in">print</span>(score)<br><br><span class="hljs-comment"># Get the prediction result</span><br>y_pred = lr_model.predict(test_tfidf_matrix)<br></code></pre></td></tr></table></figure><h4 id="3-Result-3"><a href="#3-Result-3" class="headerlink" title="3.Result"></a>3.Result</h4><p><img src="image/image-11.png" alt=""></p><p>(1) Training time</p><p>The total training and prediction time is 1.63s</p><p>(2) Accuracy on the training set</p><p>The accuracy of prediction on the training set is 1.0</p><p>(3) Accuracy on the test set</p><p><img src="image/image-2.png" alt=""></p><p>The accuracy of prediction on the test set is 0.9865</p><h3 id="SVM"><a href="#SVM" class="headerlink" title="SVM"></a>SVM</h3><h4 id="1-Theory-4"><a href="#1-Theory-4" class="headerlink" title="1.Theory"></a>1.Theory</h4><p>By constructing TF-IDF as input features in the manner described above, it can be transformed into a classification problem with multidimensional features, and a SVM model can be used for prediction.</p><h4 id="2-Code-4"><a href="#2-Code-4" class="headerlink" title="2.Code"></a>2.Code</h4><p>critical code：</p><p>(1) Data Processing: It is basically the same as the Bayesian model and logistic regression model based on TF-IDF, with the only difference being the need to convert ‘ham’ and ‘spam’ into 0 and 1.</p><p>(2) The training process only changed the called model, and the other steps are basically the same.</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># Convert the strings &#x27;ham&#x27; and &#x27;spam&#x27; of Label to 0 and 1, respectively</span><br>train_y = []<br><span class="hljs-keyword">for</span> index, row <span class="hljs-keyword">in</span> train_data_df.iterrows():<br>    label_bool = (row[<span class="hljs-string">&#x27;Label&#x27;</span>] == <span class="hljs-string">&#x27;spam&#x27;</span>)<br>    train_y.append(<span class="hljs-number">0.0</span> + label_bool)<br><br><span class="hljs-comment"># Train support vector machine models on the training set</span><br>SVR_model = LinearSVC()<br>SVR_model.fit(train_tfidf_matrix, train_y)<br><br><span class="hljs-comment"># Get the prediction result</span><br>y_pred = SVR_model.predict(test_tfidf_matrix)<br></code></pre></td></tr></table></figure><h4 id="3-Result-4"><a href="#3-Result-4" class="headerlink" title="3.Result"></a>3.Result</h4><p><img src="image/image-14.png" alt=""></p><p>(1) Training time</p><p>The total training and prediction time is 0.35s</p><p>(2) Accuracy on the training set</p><p>The accuracy of prediction on the training set is 0.9978</p><p>(3) Accuracy on the test set</p><p><img src="image/image-15.png" alt=""></p><p>The accuracy of prediction on the test set is 0.9874</p><h3 id="Other-classification-models-Decision-Tree-Random-Forest-Multilayer-Perceptron"><a href="#Other-classification-models-Decision-Tree-Random-Forest-Multilayer-Perceptron" class="headerlink" title="Other classification models (Decision Tree, Random Forest, Multilayer Perceptron)"></a>Other classification models (Decision Tree, Random Forest, Multilayer Perceptron)</h3><h4 id="1-Theory-5"><a href="#1-Theory-5" class="headerlink" title="1.Theory"></a>1.Theory</h4><p>Due to their data processing methods being roughly consistent with the Bayes, Logistic Regression, and SVM based on TF-IDF mentioned above, all of which are packet switching solutions for a multidimensional feature classification problem, they will not be further elaborated。</p><h4 id="2-Code-5"><a href="#2-Code-5" class="headerlink" title="2.Code"></a>2.Code</h4><p>Decision Tree：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># Train a SVM model on the training set</span><br>DTR_model = DecisionTreeRegressor()<br>DTR_model.fit(train_tfidf_matrix, train_y)<br><br><span class="hljs-comment"># Get the prediction result</span><br>y_pred = DTR_model.predict(test_tfidf_matrix)<br></code></pre></td></tr></table></figure><p>Random Forest：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># Train a Random Forest model on the training set</span><br>RF_model = RandomForestClassifier()<br>RF_model.fit(train_tfidf_matrix, train_y)<br><br><span class="hljs-comment"># Get the prediction result</span><br>y_pred = RF_model.predict(test_tfidf_matrix)<br></code></pre></td></tr></table></figure><p>Multilayer Perceptron：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># Train a MLP model on the training set</span><br>MLP_model = MLPRegressor()<br>MLP_model.fit(train_tfidf_matrix, train_y)<br><br><span class="hljs-comment"># Get the prediction result</span><br>y_pred = MLP_model.predict(test_tfidf_matrix)<br></code></pre></td></tr></table></figure><h4 id="3-Result-5"><a href="#3-Result-5" class="headerlink" title="3.Result"></a>3.Result</h4><p>Decision Tree:</p><p><img src="image/image-16.png" alt=""></p><p><img src="image/image-17.png" alt=""></p><p>Training time is 0.72s.</p><p>The accuracy of prediction on the training set is 0.9981.</p><p>Accuracy on the test set is 0.9390.</p><p>Random Forest：</p><p><img src="image/image-19.png" alt=""></p><p><img src="image/image-20.png" alt=""></p><p>Training time is 3.37s.</p><p>The accuracy of prediction on the training set is 0.9997.</p><p>The accuracy of prediction on the test set is 0.9874.</p><p>Multilayer Perceptron：</p><p><img src="image/image-21.png" alt=""></p><p><img src="image/image-23.png" alt=""></p><p>Training time is 8.51s.</p><p>The accuracy of prediction on the training set is 0.9968.</p><p>The accuracy of prediction on the test set is 0.9919.</p><h3 id="Combination-Model"><a href="#Combination-Model" class="headerlink" title="Combination Model"></a>Combination Model</h3><h4 id="1-Theory-6"><a href="#1-Theory-6" class="headerlink" title="1.Theory"></a>1.Theory</h4><p>I have implemented a Bayesian model and a Logistic Regression model based on TF-IDF, and their prediction accuracy is not much different. </p><p>Considering how to combine them, a natural idea is to let the two models make separate predictions. If the prediction results of the two models are the same, it is considered as the prediction result. Otherwise, we will use other methods to determine whether it is spam.</p><p>I printed out all the email texts with different prediction results from two models：</p><p><img src="image/image-12.png" alt=""></p><p>I found that most of these samples are spam emails. I guess both models have a tendency to predict some spam emails as normal emails, so a simple judgment method was adopted: all emails with different prediction results from the two models were treated as spam emails.</p><p>I also tried using Bayesian model, logistic regression model, and support vector machine model to predict simultaneously, and then selected the most frequently occurring classification from the three results as the final classification, but the performance did not improve on the test set. But if samples with different results among them are treated as spam emails, their scores on the test set will be improved.</p><p>Afterwards, I tried using five models including Bayesian, logistic regression, SVM, random forest, and MLP for simultaneous prediction. The prediction results of the five models were voted to obtain the final result, but there was no improvement in accuracy on the test set. Considering that the model has a tendency to predict some spam emails as normal emails, I attempted to take spam as the final result if any of the five models predicted it as spam. The accuracy of the results on the test set was improved.</p><h4 id="2-Code-6"><a href="#2-Code-6" class="headerlink" title="2.Code"></a>2.Code</h4><p>critical code：</p><p>(1) Bayes and logistic regression combination model：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># Train logistic regression models on the training set</span><br>lr_model = LogisticRegressionCV(max_iter = <span class="hljs-number">100000</span>)<br>lr_model.fit(train_tfidf_matrix, train_data_df[<span class="hljs-string">&#x27;Label&#x27;</span>].tolist())<br><br><span class="hljs-comment"># Train Bayes models on the training set</span><br>bayes_model = MultinomialNB()<br>bayes_model.fit(train_tfidf_matrix, train_data_df[<span class="hljs-string">&#x27;Label&#x27;</span>].tolist())<br><br><span class="hljs-comment"># Get the prediction result</span><br>y_logistic_pred = lr_model.predict(test_tfidf_matrix)<br>y_bayes_pred = bayes_model.predict(test_tfidf_matrix)<br><br><span class="hljs-comment"># Get the result</span><br><span class="hljs-keyword">for</span> index, row <span class="hljs-keyword">in</span> test_data_df.iterrows():<br>    <span class="hljs-built_in">id</span> = row[<span class="hljs-string">&#x27;ID&#x27;</span>]<br>    label1 = y_logistic_pred[index]<br>    label2 = y_bayes_pred[index]<br>    <span class="hljs-keyword">if</span>(label1 == label2): <span class="hljs-comment"># Compare the prediction result of two models</span><br>        label = label1  <span class="hljs-comment"># If they are the same, use it as the prediction result</span><br>    <span class="hljs-keyword">else</span>:   <span class="hljs-comment"># mark it as spam</span><br>        <span class="hljs-built_in">print</span>(row[<span class="hljs-string">&#x27;Email&#x27;</span>])<br>        label = <span class="hljs-string">&#x27;spam&#x27;</span><br>    new_row = pd.DataFrame([[<span class="hljs-built_in">id</span>, label]], columns = [<span class="hljs-string">&#x27;ID&#x27;</span>, <span class="hljs-string">&#x27;Label&#x27;</span>])<br>    result_df = pd.concat([result_df, new_row], ignore_index = <span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>(2) Five models combination：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs py">SVR_model = LinearSVC()<br>SVR_model.fit(train_tfidf_matrix, train_y)<br> <br>lr_model = LogisticRegressionCV(max_iter = <span class="hljs-number">100000</span>)<br>lr_model.fit(train_tfidf_matrix, train_y)<br><br>bayes_model = MultinomialNB()<br>bayes_model.fit(train_tfidf_matrix, train_y)<br><br>MLP_model = MLPRegressor()<br>MLP_model.fit(train_tfidf_matrix, train_y)<br><br>RF_model = RandomForestClassifier()<br>RF_model.fit(train_tfidf_matrix, train_y)<br><br>y_logistic_pred = lr_model.predict(test_tfidf_matrix)<br>y_bayes_pred = bayes_model.predict(test_tfidf_matrix)<br>y_SVR_pred = SVR_model.predict(test_tfidf_matrix)<br>y_RF_pred = RF_model.predict(test_tfidf_matrix)<br>y_MLP_pred = MLP_model.predict(test_tfidf_matrix)<br><br>y_logistic_train = lr_model.predict(train_tfidf_matrix)<br>y_bayes_train = bayes_model.predict(train_tfidf_matrix)<br>y_SVR_train = SVR_model.predict(train_tfidf_matrix)<br>y_RF_train = RF_model.predict(train_tfidf_matrix)<br>y_MLP_train = MLP_model.predict(train_tfidf_matrix)<br><br>right_cnt = <span class="hljs-number">0</span><br>wrong_cnt = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> index, row <span class="hljs-keyword">in</span> train_data_df.iterrows():<br>    <span class="hljs-keyword">if</span> y_MLP_train[index] &gt; <span class="hljs-number">0.5</span>:<br>        y_MLP = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        y_MLP = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span>(y_logistic_train[index] + y_bayes_train[index] + y_SVR_train[index] + y_RF_train[index] + y_MLP &gt;= <span class="hljs-number">1.0</span>):<br>        label = <span class="hljs-string">&#x27;spam&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        label = <span class="hljs-string">&#x27;ham&#x27;</span><br>    <span class="hljs-keyword">if</span>(label == row[<span class="hljs-string">&#x27;Label&#x27;</span>]):<br>        right_cnt += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        wrong_cnt += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(right_cnt / (right_cnt + wrong_cnt))<br><br><span class="hljs-keyword">for</span> index, row <span class="hljs-keyword">in</span> test_data_df.iterrows():<br>    <span class="hljs-keyword">if</span> y_MLP_pred[index] &gt; <span class="hljs-number">0.5</span>:<br>        y_MLP = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        y_MLP = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span>(y_logistic_pred[index] + y_bayes_pred[index] + y_SVR_pred[index] + y_RF_pred[index] + y_MLP &gt;= <span class="hljs-number">1.0</span>):<br>        label = <span class="hljs-string">&#x27;spam&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        label = <span class="hljs-string">&#x27;ham&#x27;</span><br>    <span class="hljs-built_in">id</span> = row[<span class="hljs-string">&#x27;ID&#x27;</span>]<br>    new_row = pd.DataFrame([[<span class="hljs-built_in">id</span>, label]], columns = [<span class="hljs-string">&#x27;ID&#x27;</span>, <span class="hljs-string">&#x27;Label&#x27;</span>])<br>    result_df = pd.concat([result_df, new_row], ignore_index = <span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h4 id="3-Result-6"><a href="#3-Result-6" class="headerlink" title="3.Result"></a>3.Result</h4><p><img src="image/image-13.png" alt=""></p><p><img src="image/image-24.png" alt=""></p><p>(1) Training time</p><p>Combination of two models: The total training and prediction time is 1.91s.<br>Combination of five models: The total training and prediction time is 12.20s.</p><p>(2) Accuracy on the training set</p><p>Combination of two models: The accuracy of prediction on the training set is 1.0.<br>Combination of five models: The accuracy of prediction on the training set is 0.9991.</p><p>(3) Accuracy on the test set</p><p><img src="image/image-4.png" alt=""></p><p><img src="image/image-25.png" alt=""></p><p>Combination of two models: The accuracy of prediction on the test set is 0.9883.<br>Combination of five models: The accuracy of prediction on the test set is 0.9919.</p><h3 id="Result-and-Summary"><a href="#Result-and-Summary" class="headerlink" title="Result and Summary"></a>Result and Summary</h3><h4 id="Ranking"><a href="#Ranking" class="headerlink" title="Ranking"></a>Ranking</h4><p><img src="image/image-26.png" alt=""></p><p>As shown above, among all the prediction results I submitted, the highest accuracy on the test set was 0.9919, ranking 11th</p><h4 id="Comparison-of-different-models"><a href="#Comparison-of-different-models" class="headerlink" title="Comparison of different models"></a>Comparison of different models</h4><div class="table-container"><table><thead><tr><th>Model</th><th>Training time</th><th>Accuracy on the training set</th><th>Accuracy on the test set</th></tr></thead><tbody><tr><td>Phone Number Checker</td><td>-</td><td>0.9457</td><td>0.9434</td></tr><tr><td>Bayes Classifier based on Bag of Words</td><td>6.44s</td><td>0.9850</td><td>0.9587</td></tr><tr><td>Bayes Classifier based on TF-IDF</td><td>0.27s</td><td>0.9901</td><td>0.9847</td></tr><tr><td>Logistic Regression</td><td>1.63s</td><td>1.0000</td><td>0.9865</td></tr><tr><td>SVM</td><td>0.35s</td><td>0.9978</td><td>0.9847</td></tr><tr><td>Decision Tree</td><td>0.72s</td><td>0.9981</td><td>0.9390</td></tr><tr><td>Random Forest</td><td>3.37s</td><td>0.9997</td><td>0.9847</td></tr><tr><td>MLP</td><td>8.51s</td><td>0.9968</td><td>0.9883</td></tr><tr><td>bayes-LR Combination Model</td><td>1.91s</td><td>1.0000</td><td>0.9883</td></tr><tr><td>bayes-LR-SVR-RF-MLP Combination Model</td><td>12.20s</td><td>0.9991</td><td>0.9919</td></tr></tbody></table></div><h4 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h4><p>Phone number checking was a small attempt made by observing the characteristics of spam emails in the training set, and the effect was quite good.</p><p>The accuracy of the Bayesian classifier based on TF-IDF is much higher than that based on bag of words, and the former is also much faster in training speed than the latter.</p><p>Among these TF-IDF based models, Bayesian classifiers, logistic regression, support vector machines, random forests, and multi-layer perceptrons all have good accuracy on the training set. Among them, the multi-layer perceptron has the longest training time and the highest accuracy on the test set. The training time for Random Forest is the second longest. The accuracy of logistic regression is slightly better than SVM and Bayesian classifiers, but the training speed is slower compared to them.</p><p>Originally, it was expected that the accuracy of the multi-layer perceptron would not be very high because its expressive power was too strong and it was prone to overfitting. However, surprisingly, it was the model with the best accuracy on the test set.</p><p>The decision tree exhibits overfitting, which may be related to its strong expressive ability and small dataset size.</p><p>The Bayesian logistic regression combination model also has good accuracy on the test set, and the combination model of the five models can achieve the best accuracy, indicating that these individual models do have a tendency to predict spam emails as normal emails on the test set.</p><p>Areas that can be improved:</p><p>1) Each model is directly adjusted and uses default parameters without parameter tuning. Some models may improve their performance after parameter tuning</p><p>2) The text preprocessing is relatively rough and does not recognize and process special strings such as URLs, links, and garbled characters</p><p>3) Without multiple training sessions, the ‘Training time’ may not be precise</p><p>4) The “combination” between models is relatively simple and crude, and the single model’s “tendency to predict spam into normal mail” has not been explained in principle</p><p>5) In terms of interpretability, perhaps one or more collaborative formulas can be used for prediction, which has better interpretability and facilitates monitoring and correction</p>]]></content>
    
    
    <categories>
      
      <category>programming practice</category>
      
    </categories>
    
    
    <tags>
      
      <tag>machine learning</tag>
      
      <tag>data mining</tag>
      
      <tag>bayes classifier</tag>
      
      <tag>logistic regression</tag>
      
      <tag>SVM</tag>
      
      <tag>decision tree</tag>
      
      <tag>random forest</tag>
      
      <tag>MLP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Add a music player in your Hexo blog</title>
    <link href="/2024/07/24/Add-a-music-player-in-your-Hexo-blog/"/>
    <url>/2024/07/24/Add-a-music-player-in-your-Hexo-blog/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Add-a-music-player-in-your-Hexo-blog"><a href="#Add-a-music-player-in-your-Hexo-blog" class="headerlink" title="Add a music player in your Hexo blog"></a>Add a music player in your Hexo blog</h2><p>This article will introduce how to add a music player in your Hexo blog using the external link player provided by the music platform.</p><h3 id="external-link-player"><a href="#external-link-player" class="headerlink" title="external link player"></a>external link player</h3><p>This method is very simple. Just use a third-party music platform to find the songs you like, then generate a code for an external link player and insert it into the desired place on your blog.</p><p>For example, we can find any song or song list on music.163.com that does not require VIP and click on <em>Generate External Link Player</em>.</p><p><img src="image/QQ_1721820058144.png" alt="修瓦修瓦"></p><p>Copy the generated HTML code.</p><p><img src="image/QQ_1721820251140.png" alt=""></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;iframe <span class="hljs-attribute">frameborder</span>=<span class="hljs-string">&quot;no&quot;</span> <span class="hljs-attribute">border</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attribute">marginwidth</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attribute">marginheight</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attribute">width</span>=330 <span class="hljs-attribute">height</span>=86 <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;//music.163.com/outchain/player?type=2&amp;id=1846310505&amp;auto=1&amp;height=66&quot;</span>&gt;&lt;/iframe&gt;<br></code></pre></td></tr></table></figure><p>Then place it in the position you want, such as at the footer of the page. Just select a place in <em>blog\themes\fluid\layout_partials</em></p><p>You can also paste it in your markdown post like this:</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1846310505&auto=1&height=66"></iframe><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=110 src="//music.163.com/outchain/player?type=0&id=2869389178&auto=1&height=90"></iframe><h3 id="Hexo-Tag-Aplayer"><a href="#Hexo-Tag-Aplayer" class="headerlink" title="Hexo-Tag-Aplayer"></a>Hexo-Tag-Aplayer</h3><p>You can also use the hexo-tag-aplayer plugin to add a music player in your blog. Since my hexo version is relatively low, I won’t go into detail about it.</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://blog.csdn.net/weixin_58068682/article/details/116612364">https://blog.csdn.net/weixin_58068682/article/details/116612364</a></p>]]></content>
    
    
    <categories>
      
      <category>programming practice</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>html</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>How to enable markdown mathematical formula rendering in hexo blog</title>
    <link href="/2024/07/24/How-to-enable-markdown-mathematical-formula-rendering-in-hexo-blog/"/>
    <url>/2024/07/24/How-to-enable-markdown-mathematical-formula-rendering-in-hexo-blog/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="How-to-enable-markdown-mathematical-formula-rendering-in-hexo-blog"><a href="#How-to-enable-markdown-mathematical-formula-rendering-in-hexo-blog" class="headerlink" title="How to enable markdown mathematical formula rendering in hexo blog"></a>How to enable markdown mathematical formula rendering in hexo blog</h2><p>After you build your personal blog with hexo, you may not notice that it cannot render mathematical formulas in markdown file normally. But you always run into this problem after a few posts. I will tell you how to enable this formula rendering function.</p><h3 id="Replace-Hexo’s-markdown-rendering-engine"><a href="#Replace-Hexo’s-markdown-rendering-engine" class="headerlink" title="Replace Hexo’s markdown rendering engine"></a>Replace Hexo’s markdown rendering engine</h3><p>The default rendering engine hexo-renderer-marked has some bugs, so it is best to uninstall it and replace it with a more stable one.</p><blockquote><p>npm uninstall hexo-renderer-marked —save<br>npm install hexo-renderer-kramed —save</p></blockquote><h3 id="Modify-the-node-modules-kramed-lib-rules-inline-js-file"><a href="#Modify-the-node-modules-kramed-lib-rules-inline-js-file" class="headerlink" title="Modify the node_modules\kramed\lib\rules\inline.js file"></a>Modify the node_modules\kramed\lib\rules\inline.js file</h3><p>There are still some bugs in the rendering engine that we need to fix.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs r"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>  escape<span class="hljs-operator">:</span> <span class="hljs-operator">/</span><span class="hljs-operator">^</span><span class="hljs-punctuation">\</span><span class="hljs-punctuation">\</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">\</span><span class="hljs-punctuation">\</span>`*&#123;&#125;\[\]()#$+\-.!_&gt;])/,<br>  escape: /^\\([`<span class="hljs-operator">*</span><span class="hljs-punctuation">\</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">\</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-comment">#$+\-.!_&gt;])/,</span><br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby">/<span class="hljs-regexp">/  em: /</span>^\b_((<span class="hljs-string">?:</span>__|<span class="hljs-params">[\s\S])+?)_\b</span>|^\*((<span class="hljs-string">?:\*\*</span>|<span class="hljs-params">[\s\S])+?)\*(?!\*)/,</span><br><span class="hljs-params">  em: /^\*((?:\*\*</span>|[\s\S])+<span class="hljs-string">?)\*</span>(<span class="hljs-string">?!\*</span>)/,<br></code></pre></td></tr></table></figure><h3 id="Modify-the-config-yml-file-of-your-theme"><a href="#Modify-the-config-yml-file-of-your-theme" class="headerlink" title="Modify the _config.yml file of your theme"></a>Modify the _config.yml file of your theme</h3><p>Find the math switch in the _config.yml file of your theme, and turn it on.</p><p><img src="image/QQ_1721812617851.png" alt=""></p><h3 id="Redeploy-hexo"><a href="#Redeploy-hexo" class="headerlink" title="Redeploy hexo"></a>Redeploy hexo</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">hexo clean <br>hexo <span class="hljs-selector-tag">g</span> -d<br></code></pre></td></tr></table></figure><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://runninggump.github.io/2018/12/05/%E6%88%90%E5%8A%9F%E8%A7%A3%E5%86%B3%E5%9C%A8hexo%E4%B8%AD%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E7%9A%84%E9%97%AE%E9%A2%98/">https://runninggump.github.io/2018/12/05/%E6%88%90%E5%8A%9F%E8%A7%A3%E5%86%B3%E5%9C%A8hexo%E4%B8%AD%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E7%9A%84%E9%97%AE%E9%A2%98/</a></p>]]></content>
    
    
    <categories>
      
      <category>programming practice</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>html</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5 mysterious programming problems</title>
    <link href="/2024/07/24/5-mysterious-programming-problems/"/>
    <url>/2024/07/24/5-mysterious-programming-problems/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="5-mysterious-programming-problems"><a href="#5-mysterious-programming-problems" class="headerlink" title="5 mysterious programming problems"></a>5 mysterious programming problems</h2><p>Here are five mysterious programming problems and their solutions.</p><h3 id="1-Fib-2"><a href="#1-Fib-2" class="headerlink" title="1. Fib^2"></a>1. Fib^2</h3><p><img src="image/QQ_1721790014702.png" alt=""></p><p>fib(20) is only 10946, so we can just figure out fib(i). Then figure out fib of fib(i)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD = <span class="hljs-number">1000000007</span>;<br><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> f[<span class="hljs-number">1000100</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    f[<span class="hljs-number">0</span>] = f[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>; i&lt;=n; ++i)<br>        f[i] = (f[i<span class="hljs-number">-1</span>] + f[i<span class="hljs-number">-2</span>]) %MOD;<br>    <span class="hljs-type">int</span> t = f[n];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n<span class="hljs-number">+1</span>; i&lt;=t; ++i)<br>        f[i] = (f[i<span class="hljs-number">-1</span>] + f[i<span class="hljs-number">-2</span>]) %MOD;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, f[t]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-The-sustainable-development-of-the-research-group"><a href="#2-The-sustainable-development-of-the-research-group" class="headerlink" title="2. The sustainable development of the research group"></a>2. The sustainable development of the research group</h3><p><img src="image/QQ_1721790485315.png" alt=""></p><p>It’s easy to think of a greedy strategy: If the number of teacher A’s enrollment is x, the number of scientific research is y, they can produce (x+1)*y papers at most, using the first x*C time to enroll students and the last y*B time to do scientific research.</p><p>Because the K is less than 10001, so we can just enumerate x from 1 to K. Use $y = ceil(K / (x + 1) )$ to find the minimum value of y, while the x determined.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> B,C,K;<br><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> ans = <span class="hljs-number">1000000000</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;B, &amp;C, &amp;K);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>; x &lt;= K; ++x)&#123;<br>        <span class="hljs-type">int</span> y = (K+x) / (x<span class="hljs-number">+1</span>);<br>        <span class="hljs-keyword">if</span>(x*C + y*B &lt; ans)<br>            ans = x*C + y*B;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-The-date-of-the-scholarship"><a href="#3-The-date-of-the-scholarship" class="headerlink" title="3. The date of the scholarship"></a>3. The date of the scholarship</h3><p><img src="image/QQ_1721790663223.png" alt=""></p><p>The range of n is so small that we can calculate it month by month: we know the day of the week on the 1st of the month, then we can calculate the day of the week on the 13th of the month. And then calculate the day of the week on the 1st of the next month based on the number of days in this month.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n, day;<br><br><span class="hljs-type">int</span> num[<span class="hljs-number">13</span>]=&#123;<span class="hljs-number">0</span>, <span class="hljs-number">31</span>, <span class="hljs-number">28</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>&#125;;<br><br><span class="hljs-type">int</span> cnt[<span class="hljs-number">8</span>];<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isleap</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(x%<span class="hljs-number">4</span>!=<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(x%<span class="hljs-number">400</span>==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(x%<span class="hljs-number">100</span>==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    day = <span class="hljs-number">1</span>; <span class="hljs-comment">//星期1</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1900</span>; i&lt;<span class="hljs-number">1900</span>+n; ++i)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>; j&lt;=<span class="hljs-number">12</span>; ++j)&#123;<br>            ++cnt[(day + <span class="hljs-number">12</span> - <span class="hljs-number">1</span>) % <span class="hljs-number">7</span> + <span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span>(j == <span class="hljs-number">2</span>)&#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isleap</span>(i))<br>                    day = (day + <span class="hljs-number">29</span> - <span class="hljs-number">1</span>)%<span class="hljs-number">7</span> + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span><br>                    day = (day + <span class="hljs-number">28</span> - <span class="hljs-number">1</span>)%<span class="hljs-number">7</span> + <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>                day = (day + num[j] - <span class="hljs-number">1</span>)%<span class="hljs-number">7</span> + <span class="hljs-number">1</span>; <br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=<span class="hljs-number">7</span>; ++i)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, cnt[(i + <span class="hljs-number">5</span> - <span class="hljs-number">1</span>)%<span class="hljs-number">7</span> + <span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-Horse-traversal"><a href="#4-Horse-traversal" class="headerlink" title="4. Horse traversal"></a>4. Horse traversal</h3><p><img src="image/QQ_1721790648382.png" alt=""></p><p>This is a classic breadth-first search problem. Just put the initial position in your queue and start your bfs.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN = <span class="hljs-number">410</span>;<br><br><span class="hljs-type">int</span> n, m, x, y;<br><br><span class="hljs-type">int</span> ans[MAXN][MAXN];<br><br><span class="hljs-type">int</span> dx[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">-2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>&#125;;<br><span class="hljs-type">int</span> dy[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-2</span> , <span class="hljs-number">-1</span>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span>&#123;<br>    <span class="hljs-type">int</span> x, y, d;<br>&#125; que[MAXN*MAXN], node;<br><br><span class="hljs-type">int</span> Head, Tail;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;m&gt;&gt;x&gt;&gt;y;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>; j&lt;=m; ++j)<br>            ans[i][j] = <span class="hljs-number">-1</span>;<br>    ans[x][y] = <span class="hljs-number">0</span>;<br>    node.x = x;<br>    node.y = y;<br>    node.d = <span class="hljs-number">0</span>;<br>    que[++Tail] = node;<br>    <span class="hljs-type">int</span> vx, vy;<br>    <span class="hljs-keyword">while</span>(Head&lt;Tail)&#123;<br>        Point u = que[++Head];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">8</span>; ++i)&#123;<br>            vx = u.x + dx[i];<br>            vy = u.y + dy[i];<br>            <span class="hljs-keyword">if</span>(<span class="hljs-number">1</span>&lt;=vx &amp;&amp; vx&lt;=n &amp;&amp; <span class="hljs-number">1</span>&lt;=vy &amp;&amp;vy &lt;=m &amp;&amp; ans[vx][vy] == <span class="hljs-number">-1</span>)&#123;<br>                ans[vx][vy] = u.d + <span class="hljs-number">1</span>;<br>                node.x = vx;<br>                node.y = vy;<br>                node.d = u.d + <span class="hljs-number">1</span>;<br>                que[++Tail] = node;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; ++i)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>; j&lt;=m; ++j)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, ans[i][j]);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-COCI-‘21-Contest-2-4-Magneti"><a href="#5-COCI-‘21-Contest-2-4-Magneti" class="headerlink" title="5. [COCI ‘21 Contest 2 #4] Magneti"></a>5. [COCI ‘21 Contest 2 #4] Magneti</h3><p>problem link: <a href="https://dmoj.ca/problem/coci21c2p4">https://dmoj.ca/problem/coci21c2p4</a></p><p>solution link: <a href="https://dmoj.ca/problem/coci21c2p4/editorial">https://dmoj.ca/problem/coci21c2p4/editorial</a></p><p>Little Marko is bored of playing with shady cryptocurrencies such as Shiba Inu or XRC, which is why he decided to play with magnets. He has $n$ different magnets and a board which has $l$ available empty slots in a row, in which the magnets can be placed. Each pair of adjacent slots is exactly one centimeter apart. Each of the magnets has a radius of activity that is equal to $r_i$. This means that it will attract all magnets that are located strictly less than centimeters away (regardless of the radius of activity of the other magnet). It is possible that some magnets have the same radius of activity, but they are considered as different magnets.</p><p>Marko doesn’t like it when the magnets attract each other, so he is interested in the number of ways to place the magnets on the board so that no magnet attracts any other. All of the magnets should be placed on the board, and each empty slot may contain at most one magnet. Two ways of placing the magnets are considered different if there is a magnet which is at a different position in the first way than in the second way. As the required number can be quite large, you should output it modulo $10^9+7$.</p><p>$1 \leq n \leq 50$ and $n \leq l \leq 10000$</p><p><img src="image/QQ_1721880971844.png" alt=""></p><p>We sort the magnets by increasing radius and build the permutation with the following dp:</p><blockquote><p>dp[i][j][d]: number of ways to arrange the first i magnets in j groups such that the sum of the lengths of the groups is d.</p></blockquote><p>One group represents a segment of the permutation that is being built and is comprised of magnets and the least amount of empty space between them. The transition of the dp actually consists of adding a new magnet to one of the groups, which can be done in three ways:</p><ol><li>creating a new group that is made just from this magnet</li><li>adding a magnet to one of the ends of one of the already existing groups</li><li>connecting two existing groups by placing the new magnet between them</li></ol><p>The solution has been explained very clearly in the link, but the state transition equation is not provided. </p><p>Here is the state transition equation, which might help you understand:</p><p>creating a new group that is made just from this magnet:</p><p>$dp[i+1][j+1][d+1] += dp[i][j][d]$</p><p>adding a magnet to one of the ends of one of the already existing groups:</p><p>$dp[i+1][j][d+r_{i+1}] += dp[i][j][d] \times j \times 2$</p><p>connecting two existing groups by placing the new magnet between them:</p><p>$dp[i+1][j-1][d + 2 \times r_{i+1} - 1] += 2 \times C^{2}_{j} \times dp[i][j][d]$</p><p>The answer is:</p><p>$\sum_{d=1}^{l}{dp[n][1][d] \times C_{l-d+n}^{n}}$</p><p>boundary condition:</p><p>$dp[0][0][0] = 1$</p><p>we can find inverse elements with linear complexity:</p><p>$P = k * x + r$</p><p>$x^{-1} \equiv -\lfloor \frac{P}{i} \rfloor \times r^{-1} \ \ (mod \ P)$</p><p>Then preprocess the factorials and their inverse elements.</p><p>So we calcuate any combination number within O(1) time.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cstdio&gt;</span> </span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN = <span class="hljs-number">55</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXL = <span class="hljs-number">10000</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> MOD = <span class="hljs-number">1000000007</span>;<br><br><span class="hljs-type">int</span> n, l, r[MAXL];<br> <br><span class="hljs-type">long</span> <span class="hljs-type">long</span> fac[MAXL<span class="hljs-number">+10</span>], inv[MAXL<span class="hljs-number">+10</span>], invfac[MAXL<span class="hljs-number">+10</span>];<br><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> dp[MAXN][MAXN][MAXL<span class="hljs-number">+10</span>];<br><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> n, <span class="hljs-type">long</span> <span class="hljs-type">long</span> m)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(n &lt; m)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> fac[n] * invfac[m] % MOD * invfac[n - m] % MOD;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;l);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;r[i]);<br><br>fac[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= MAXL; ++i)<br>fac[i] = fac[i - <span class="hljs-number">1</span>] * i % MOD;<br><br>inv[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= MAXL; ++i)<br>inv[i] = (MOD - MOD / i) * inv[MOD % i] % MOD;<br><br>invfac[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= MAXL; ++i)<br>invfac[i] = invfac[i - <span class="hljs-number">1</span>] * inv[i] % MOD;<br><br><span class="hljs-built_in">sort</span>(r + <span class="hljs-number">1</span>, r + n + <span class="hljs-number">1</span>);<br><br>dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; ++j)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> d = <span class="hljs-number">1</span>; d &lt;= l; ++d)&#123;<br>dp[i][j][d] = dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>][d - <span class="hljs-number">1</span>];<br><span class="hljs-keyword">if</span>(d &gt;= r[i])&#123;<br>dp[i][j][d] += (dp[i - <span class="hljs-number">1</span>][j][d - r[i]] * j * <span class="hljs-number">2</span>) % MOD;<br>dp[i][j][d] %= MOD;<br>&#125;<br><span class="hljs-keyword">if</span>(d &gt;= <span class="hljs-number">2</span> * r[i] - <span class="hljs-number">1</span>)&#123;<br>dp[i][j][d] += (dp[i - <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>][d - r[i] * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] * j % MOD * (j + <span class="hljs-number">1</span>)) % MOD;<br>dp[i][j][d] %= MOD;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> d = <span class="hljs-number">1</span>; d &lt;= l; ++d)&#123;<br>ans += dp[n][<span class="hljs-number">1</span>][d] * <span class="hljs-built_in">C</span>(l - d + n, n) %MOD;<br>ans %= MOD;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, ans);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>programming practice</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bfs</tag>
      
      <tag>simulate</tag>
      
      <tag>dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>A few things you have to know before you join the Summer Camp held by MLDM Research Group of CAS, ICT</title>
    <link href="/2024/07/24/A-few-things-you-have-to-know-before-you-join-the-Summer-Camp-held-by-MLDM-Research-Group-of-CAS-ICT/"/>
    <url>/2024/07/24/A-few-things-you-have-to-know-before-you-join-the-Summer-Camp-held-by-MLDM-Research-Group-of-CAS-ICT/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="A-few-things-you-have-to-know-before-you-join-the-Summer-Camp-held-by-MLDM-Research-Group-of-CAS-ICT"><a href="#A-few-things-you-have-to-know-before-you-join-the-Summer-Camp-held-by-MLDM-Research-Group-of-CAS-ICT" class="headerlink" title="A few things you have to know before you join the Summer Camp held by MLDM Research Group of CAS, ICT"></a>A few things you have to know before you join the Summer Camp held by MLDM Research Group of CAS, ICT</h2><p>Before I give my advice, you might be curious about some details about the 2024 summer camp exam.</p><p>First of all, you need to know that there are different forms of examination for each group in the summer camp held by ICT, and this article is only for the MLDM group.</p><p>The MLDM group has a total of three exams, which are computer test, written test and interview.</p><h3 id="Computer-test"><a href="#Computer-test" class="headerlink" title="Computer test"></a>Computer test</h3><p>The duration of the computer test is 60 minutes, a total of 5 questions, similar to the ACM competition system. The only difference is that when the wrong submission is not punished. The final score according to the ranking, the time is relatively tight.</p><p>The first four questions were easy, but the fifth was difficult. In fact, no one had worked out the fifth question in the computer test.</p><p>You can see these computer test questions in another of my posts: <a href="/2024/07/24/5-mysterious-programming-problems/" title="5 mysterious programming problems">5 mysterious programming problems</a></p><p>It is confusing that the problem description given in the computer test did not include the original <em>Explanation for Sample Output</em> in the fifth question, making it difficult for candidates to understand the meaning of the question.</p><h3 id="Written-test"><a href="#Written-test" class="headerlink" title="Written test"></a>Written test</h3><p>The written test lasts 70 minutes and consists of 6 questions. The first problem among them examines the density function, edge probability, and expected value of polynomials for x and y in probability theory and quantitative statistics, and requires the use of double integrals. </p><p>The second question examines the eigenvalues of matrices, eigenvectors, and other knowledge of linear algebra. </p><p>The third and fourth questions examine the principles of neural networks and linear regression respectively. </p><p>The fifth and sixth questions must be answered in English. Read the chart and descript the feature of it; read the paper and write an abstract.</p><p>It should be noted that all questions are in English. Therefore, in the review before the exam, pay attention to the English vocabulary of various professional terms, and try to avoid the situation of not understanding the questions during the exam.</p><h3 id="Interview"><a href="#Interview" class="headerlink" title="Interview"></a>Interview</h3><p>In the interview, you will face seven teachers and ask different questions to each student, but the general content is similar. First of all, make a self-introduction in English, requiring no manuscript and no English content on the PPT.</p><p>After that, you may be asked to talk about your research experience in machine learning and data mining. And the teachers will ask some questions about it.</p><p>The teachers will then examine your concepts and foundational problems in calculus and linear algebra.</p><p>For example: What is continuous? What is infinity? What is the difference between a system of homogeneous linear equations and a system of non-homogeneous linear equations? How to determine whether a matrix has a solution?</p><p>Some programming knowledge is also asked, such as explaining the principles of a certain sorting algorithms.</p><p>Be prepared for other common interview questions, such as what do you know about cutting-edge scientific research in machine learning?</p><h3 id="Advice"><a href="#Advice" class="headerlink" title="Advice"></a>Advice</h3><p>Read the above content, you may have a basic understanding of the test. But there are still some things you may not be clear about.</p><ol><li><p>Contact a mentor of your choice in advance and do an internship in the MLDM group, if only it was too late. An appropriate time to contact an advisor is during the winter break of your junior year or at the beginning of the next semester.</p></li><li><p>Have a resume ready in advance, even if it’s not required in the camp’s registration materials. Because you will need it for the interview.</p></li><li><p>Memorize your English self-introduction.</p></li><li><p>Prepare an 800-word introduction that focuses on your research practices in machine learning and data mining. Chances are you’ll get an email at 10 p.m. the night before your 9:00 a.m. interview, asking you to fill out a form that includes an introduction of no more than 1,000 words.</p></li><li><p>If you’ve forgotten all about calculus and linear algebra, that’s perfectly normal. But if you don’t review carefully at least half a month in advance, you will regret it.</p></li><li><p>Prepare a powerpoint presentation introducing yourself in Chinese, not English.</p></li><li><p>Computer tests are graded according to ranking. Even if you’re not familiar with online judge, there’s no need to be nervous. Because the rank 1 made 4 questions, the machine test score is 85 points, and you made only 1 question, ranked 20th, you can still get 65 points. The difference between your scores is only the score of one problem in the written test.</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>experience sharing</category>
      
    </categories>
    
    
    <tags>
      
      <tag>machine learning</tag>
      
      <tag>data mining</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Weight Record</title>
    <link href="/2024/07/23/Weight-Record/"/>
    <url>/2024/07/23/Weight-Record/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Weight-chart"><a href="#Weight-chart" class="headerlink" title="Weight chart"></a>Weight chart</h3><div class="table-container"><table><thead><tr><th>Date</th><th>Weight (kg)</th><th>Running (km)</th><th>Cycling (km)</th><th>remark</th></tr></thead><tbody><tr><td>2024.7.23</td><td>93.2</td><td>2.34</td><td>8.11</td><td>have a little cold</td></tr><tr><td>2024.7.24</td><td>92.3</td><td>4.42</td><td>14.4</td><td>still have a little cough</td></tr><tr><td>2024.7.25</td><td>91.0</td><td>4.18</td><td>6.78</td><td>feel good</td></tr><tr><td>2024.7.26</td><td>90.9</td><td>3.79</td><td>8.48</td><td></td></tr><tr><td>2024.7.27</td><td>92.2</td><td>5.01</td><td></td><td></td></tr><tr><td>2024.7.28</td><td></td><td></td><td></td><td></td></tr><tr><td>2024.7.29</td><td></td><td></td><td></td><td></td></tr><tr><td>2024.7.30</td><td></td><td></td><td></td><td></td></tr><tr><td>2024.7.31</td><td></td><td></td><td></td></tr></tbody></table></div>]]></content>
    
    
    <categories>
      
      <category>daily life</category>
      
    </categories>
    
    
    <tags>
      
      <tag>health</tag>
      
      <tag>exercise</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Decorate Your Blog</title>
    <link href="/2024/07/23/Decorate-Your-Blog/"/>
    <url>/2024/07/23/Decorate-Your-Blog/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Once you’ve built a blog with Hexo and Fluid themes, you can’t wait to spruce it up a bit. Here are some ways to modify ICONS, backgrounds, and loading GIFs</p><h3 id="change-the-img"><a href="#change-the-img" class="headerlink" title="change the img"></a>change the img</h3><p>First, you can put the image you want to replace into the <em>fluid/source/img</em> directory and change the location of the image reference in the <em>_config.yml</em> file in the <em>fluid</em> directory</p><p><img src="image/QQ_1721730495293.png" alt=""></p><p>For example, I replaced fluid.png with moca.png, and replaced loading.gif with xiaobai.gif</p><p><img src="image/xiaobai.gif" alt="&quot;Why this image still loading?&quot;"></p><h3 id="Random-background-picture"><a href="#Random-background-picture" class="headerlink" title="Random background picture"></a>Random background picture</h3><p>Create a new <em>random-bg</em> directory under <em>fluid\source\img</em>, and put your favorite background images in it</p><p>Edit the <em>banner.ejs</em> file in the <em>blog\themes\fluid\layout_partials\header</em> path</p><p><img src="image/QQ_1721733720612.png" alt=""></p><p>Add the following code at the end of the file<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">getRandomNumber</span>(<span class="hljs-params">min, max</span>) &#123;<br>    min = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(min);<br>    max = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(max);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * (max - min + <span class="hljs-number">1</span>)) + min;<br>  &#125;<br><br><br><span class="hljs-keyword">var</span> randomNum = <span class="hljs-title function_">getRandomNumber</span>(<span class="hljs-number">0</span>, <span class="hljs-number">8</span>).<span class="hljs-title function_">toString</span>();<br><span class="hljs-keyword">var</span> banner_img = <span class="hljs-string">&quot;/img/random-bg/&quot;</span> + randomNum + <span class="hljs-string">&quot;.avif&quot;</span>;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;banner&#x27;</span>).<span class="hljs-title function_">removeAttribute</span>(<span class="hljs-string">&#x27;style&#x27;</span>)<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;banner&#x27;</span>).<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;style&#x27;</span>,<span class="hljs-string">`background: url(&#x27;<span class="hljs-subst">$&#123;banner_img&#125;</span>&#x27;) no-repeat center center; background-size: cover;`</span>)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></p><p>Note that the name and suffix of the image in the path must be correct</p><h3 id="Add-a-music-player"><a href="#Add-a-music-player" class="headerlink" title="Add a music player"></a>Add a music player</h3><p>You can also add a music player in your blog, the specific method can be found by clicking this link:</p><a href="/2024/07/24/Add-a-music-player-in-your-Hexo-blog/" title="Add a music player in your Hexo blog">Add a music player in your Hexo blog</a><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://linguoguang.com/2023/05/10/Hexo_Fluid%E9%9A%8F%E6%9C%BA%E8%83%8C%E6%99%AF%E5%9B%BE%E5%AE%9E%E7%8E%B0/">https://linguoguang.com/2023/05/10/Hexo_Fluid%E9%9A%8F%E6%9C%BA%E8%83%8C%E6%99%AF%E5%9B%BE%E5%AE%9E%E7%8E%B0/</a></p>]]></content>
    
    
    <categories>
      
      <category>programming practice</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Build up blog site using GitHub and Hexo</title>
    <link href="/2024/07/22/Build%20up%20blog%20site%20using%20GitHub%20and%20Hexo/"/>
    <url>/2024/07/22/Build%20up%20blog%20site%20using%20GitHub%20and%20Hexo/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Documentation for hexo: <a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p><h4 id="1-Prepare-a-GitHub-account"><a href="#1-Prepare-a-GitHub-account" class="headerlink" title="1.Prepare a GitHub account"></a>1.Prepare a GitHub account</h4><h4 id="2-Install-git"><a href="#2-Install-git" class="headerlink" title="2.Install git"></a>2.Install git</h4><h4 id="3-Install-NodeJS"><a href="#3-Install-NodeJS" class="headerlink" title="3.Install NodeJS"></a>3.Install NodeJS</h4><p>Download the installation package: <a href="https://nodejs.org/zh-cn/download/package-manager">https://nodejs.org/zh-cn/download/package-manager</a></p><p>Enter <em>node -v</em> in cmd to view the node version<br>Enter <em>npm -v</em> in cmd to view the npm version<br><img src="image/QQ_1721559419254.png" alt=""></p><h4 id="4-Create-a-repository-on-github"><a href="#4-Create-a-repository-on-github" class="headerlink" title="4.Create a repository on github"></a>4.Create a repository on github</h4><p>Name the code repository <em>\<username\>.github.io</em></p><p><img src="image/QQ_1721560001725.png" alt=""></p><p>Create a file named <em>index.html</em> for the home page</p><h4 id="4-Install-Hexo"><a href="#4-Install-Hexo" class="headerlink" title="4.Install Hexo"></a>4.Install Hexo</h4><p>Install Hexo: <a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install hexo-<span class="hljs-keyword">cli</span> -g<br></code></pre></td></tr></table></figure><p><img src="image/QQ_1721561341643.png" alt=""></p><p>Enter <em>hexo -v</em> in cmd to view the node version</p><p><img src="image/QQ_1721567770504.png" alt=""></p><h4 id="5-build-up-blog"><a href="#5-build-up-blog" class="headerlink" title="5.build up blog"></a>5.build up blog</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">hexo init <span class="hljs-keyword">blog</span><br><span class="hljs-keyword"></span>cd <span class="hljs-keyword">blog</span><br><span class="hljs-keyword"></span>npm <span class="hljs-keyword">install</span><br><span class="hljs-keyword"></span>hexo server<br></code></pre></td></tr></table></figure><p><img src="image/QQ_1721567929877.png" alt=""></p><p><img src="image/QQ_1721567957446.png" alt=""></p><p>Click on the link, we can see a web page</p><p><img src="image/QQ_1721568074406.png" alt=""></p><h4 id="6-change-the-theme"><a href="#6-change-the-theme" class="headerlink" title="6.change the theme"></a>6.change the theme</h4><p>Fluid theme: <a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></p><p><img src="image/QQ_1721568509428.png" alt=""></p><p>Download the zip pack, unzip it to the <em>themes</em> directory, and rename it <em>fluid</em></p><p><img src="image/QQ_1721569399760.png" alt=""></p><p>change the <em>language</em> and <em>theme</em> in <em>_config.yml</em></p><p><img src="image/QQ_1721569427361.png" alt=""></p><blockquote><p>language: zh-CN<br>theme: fluid</p></blockquote><p>enter <em>hexo new page about</em> to build an about page</p><p><img src="image/QQ_1721569589234.png" alt=""></p><p>edit the about page</p><p><img src="image/QQ_1721570431118.png" alt=""></p><h4 id="7-Create-an-article"><a href="#7-Create-an-article" class="headerlink" title="7.Create an article"></a>7.Create an article</h4><p>enter <em>$ hexo new [layout] \<title\></em> to create a new article</p><p>Create an image directory in the source directory for storing pictures, use <em>![Alt text](image/picture.png)</em> to insert the image</p><h4 id="8-Personalized-page-display"><a href="#8-Personalized-page-display" class="headerlink" title="8.Personalized page display"></a>8.Personalized page display</h4><p>Modify the _config.yml file in the blog directory</p><p><img src="image/QQ_1721700618297.png" alt=""></p><p>Modify the _config.yml file in the fluid directory</p><p><img src="image/QQ_1721699390516.png" alt=""></p><p><img src="image/QQ_1721699719040.png" alt=""></p><h4 id="9-Added-the-read-volume-statistics-function"><a href="#9-Added-the-read-volume-statistics-function" class="headerlink" title="9.Added the read volume statistics function"></a>9.Added the read volume statistics function</h4><p>Sign up for LeanCloud account, complete real-name authentication, and verify email</p><p><a href="https://console.leancloud.cn/">https://console.leancloud.cn/</a></p><p>Create App, Open the APP and click Settings-App Keys</p><p>Modify the _config.yml file in the fluid directory</p><p><img src="image/QQ_1721701934711.png" alt=""></p><p>Set app_id, app_key, server_url and other information to the corresponding positions</p><p><img src="image/QQ_1721702000980.png" alt=""></p><p><img src="image/QQ_1721702352582.png" alt=""></p><p>The effect:<br><img src="image/QQ_1721702386582.png" alt=""></p><p>Display website PV and UV statistics</p><p><img src="image/QQ_1721727947038.png" alt=""></p><p>The effect:<br><img src="image/QQ_1721702709940.png" alt=""></p><h4 id="10-Enable-comment"><a href="#10-Enable-comment" class="headerlink" title="10.Enable comment"></a>10.Enable comment</h4><p>Modify the _config.yml file in the fluid directory</p><p><img src="image/QQ_1721703690153.png" alt=""></p><p>Set app_id, app_key and other information to the corresponding positions</p><p><img src="image/QQ_1721703864335.png" alt=""></p><p>The effect:<br><img src="image/QQ_1721703893688.png" alt=""></p><h4 id="11-Publish-to-GitHub-pages"><a href="#11-Publish-to-GitHub-pages" class="headerlink" title="11.Publish to GitHub pages"></a>11.Publish to GitHub pages</h4><p>install hexo-deployer-git</p><blockquote><p>npm install hexo-deployer-git —save</p></blockquote><p><img src="image/QQ_1721704197123.png" alt=""></p><p>Modify the _config.yml file in the Blog directory</p><p><img src="image/QQ_1721704593340.png" alt=""></p><p>Deploy to github:</p><blockquote><p>hexo g -d</p></blockquote><p>Go to yjkyjkyjk.github.io in a browser:</p><p><img src="image/QQ_1721704804877.png" alt=""></p><h4 id="12-Customize-the-domain-in-the-GitHub-Page"><a href="#12-Customize-the-domain-in-the-GitHub-Page" class="headerlink" title="12.Customize the domain in the GitHub Page"></a>12.Customize the domain in the GitHub Page</h4><p><a href="https://docs.github.com/zh/pages/configuring-a-custom-domain-for-your-github-pages-site/about-custom-domains-and-github-pages">https://docs.github.com/zh/pages/configuring-a-custom-domain-for-your-github-pages-site/about-custom-domains-and-github-pages</a></p><p>I registered a domain name in Tencent Cloud. The real-name authentication needs to wait for a few minutes</p><p>DNS resolution:<br><img src="image/QQ_1721711114663.png" alt=""></p><p>add CNAME file in source directory</p><p>Enter your domain name in the CNAME file</p><p><img src="image/QQ_1721711412388.png" alt=""></p><blockquote><p>hexo clean<br>hexo d -g</p></blockquote><p>Add a custom domain name on Github Pages</p><p><img src="image/QQ_1721711734667.png" alt=""></p><p>Type yjk.ac.cn into your browser and you’ll see the blog page</p><p>If you type yjkyjkyjk.github.io in your browser, you will be redirected to yjk.ac.cn</p><h4 id="Unexpected-problems"><a href="#Unexpected-problems" class="headerlink" title="Unexpected problems"></a>Unexpected problems</h4><ol><li>npm path is faulty</li></ol><p><img src="image/QQ_1721560564053.png" alt=""></p><p>This problem is probably caused by the fact that I merged disk C with disk D, resulting in no disk D at present</p><p><img src="image/QQ_1721560937623.png" alt=""></p><p>Open <em>.npmrc</em> with Wordpad and change D: to C:</p><p><img src="image/QQ_1721560993499.png" alt=""></p><p>set prefix and cache:</p><blockquote><p>npm config set prefix “C:\Program Files\nodejs\node_global”</p><p>npm config set cache “C:\Program Files\nodejs\node_global”</p></blockquote><p>add NODE_PATH:</p><p><img src="image/QQ_1721567484384.png" alt=""></p><ol><li>Network delay problem：</li></ol><p><img src="image/QQ_1721561154854.png" alt=""></p><p>use a VPN:</p><p><img src="image/QQ_1721561395275.png" alt=""></p><ol><li>hexo not found</li></ol><p><img src="image/QQ_1721561758547.png" alt=""></p><p>NodeJS was probably not added to the path</p><p><img src="image/QQ_1721567664601.png" alt=""></p><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><p><a href="https://blog.csdn.net/yaorongke/article/details/119089190">https://blog.csdn.net/yaorongke/article/details/119089190</a></p><p><a href="https://cloud.tencent.com/developer/article/2142661">https://cloud.tencent.com/developer/article/2142661</a></p>]]></content>
    
    
    <categories>
      
      <category>programming practice</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/07/21/hello-world/"/>
    <url>/2024/07/21/hello-world/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
